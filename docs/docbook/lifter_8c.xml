<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="lifter_8c">
    <title>lifter.c File Reference</title>
    <programlisting>#include &quot;lifter.h&quot;</programlisting>
    <programlisting>#include &quot;log.h&quot;</programlisting>
        <section>
            <title>Variables</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static bool <link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static bool <link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Ultrasonic <link linkend="lifter_8c_1a5dfaf05eb7e97b2e29d04eb068f9c240">lifter_ultrasonic</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static bool <link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a453a3fb02960a7b90435e942bbe90d7a">autostack_routine</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="lifter_8c_1a2719740958fd8a5926f88f6194e820e3">getLifterHeight</link> (
)<para><emphasis>Gets the height of the lifter in inches.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="lifter_8c_1acdf909159b0406c48099843f2306be78">getLifterTicks</link> (
)<para><emphasis>Gets the value of the lifter pot.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>float <link linkend="lifter_8c_1ab0460888f3213e5510bd25ae1e152a75">lifterPotentiometerToDegree</link> (
int x)<para><emphasis>height of the lifter in degrees from 0 height</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1ad36c37086a91046af4e6f619618b7719">lower_main_lifter</link> (
)<para><emphasis>Lowers the main lifter.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1af76abbd394bf206ab56fa237d776f2b3">lower_secondary_lifter</link> (
)<para><emphasis>Lowers the secondary lifter.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static void <link linkend="lifter_8c_1adfb6207ee1f20953058c8de81ec3386a">main_lifter_update</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a2e2bd38b5b8b52378f3510368bf8aa0a">raise_main_lifter</link> (
)<para><emphasis>Raises the main lifter.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a786f679ea48bb8c80e00fbac9a69911b">raise_secondary_lifter</link> (
)<para><emphasis>Raises the main lifter.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static void <link linkend="lifter_8c_1ac59fe6ffc80bab7f117ec0a8e482277b">secondary_lifter_update</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1abddc7cb502e12fa277b627c90a45efb1">set_lifter_pos</link> (
int pos)<para><emphasis>Sets the lifter positions to the given value.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link> (
const int v)<para><emphasis>Sets the main lifter motors to the given value.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link> (
const int v)<para><emphasis>Sets the secondary lifter motors to the given value.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a59bb7413777ca16aba124aaedf95c79b">update_lifter</link> (
)<para><emphasis>Updates the lifter in teleop.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /Users/chrisjerrett/Desktop/InTheZoneA/src/lifter.c</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="lifter_8h">lifter.h</link>&quot;</emphasis>
2 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="log_8h">log.h</link>&quot;</emphasis>
3 
<link linkend="lifter_8c_1a5dfaf05eb7e97b2e29d04eb068f9c240">4 </link>Ultrasonic&#32;<link linkend="lifter_8c_1a5dfaf05eb7e97b2e29d04eb068f9c240">lifter_ultrasonic</link>;
5 
<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">6 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">7 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
8 
<link linkend="lifter_8c_1a453a3fb02960a7b90435e942bbe90d7a">9 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a453a3fb02960a7b90435e942bbe90d7a">autostack_routine</link>()&#32;{
10 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;instruction_couter&#32;=&#32;0;
11 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;routine_complete&#32;=&#32;<emphasis class="keyword">false</emphasis>;
12 &#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(<emphasis class="keyword">true</emphasis>)&#32;{
13 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(instruction_couter&#32;==&#32;0)&#32;{
14 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;dist&#32;=&#32;ultrasonicGet(<link linkend="lifter_8c_1a5dfaf05eb7e97b2e29d04eb068f9c240">lifter_ultrasonic</link>);
15 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(dist&#32;&gt;&#32;11&#32;||&#32;dist&#32;==&#32;-ULTRA_BAD_RESPONSE)&#32;{
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="lifter_8c_1a2e2bd38b5b8b52378f3510368bf8aa0a">raise_main_lifter</link>();
17 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(0);
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;instruction_couter&#32;=&#32;1;
20 &#32;&#32;&#32;&#32;&#32;&#32;}
21 &#32;&#32;&#32;&#32;}
22 &#32;&#32;}
23 }
24 
<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">33 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;v)&#32;{
34 &#32;&#32;<link linkend="slew_8h_1a9f8b8ae577ef938622024545711f0151">set_motor_immediate</link>(<link linkend="motor__ports_8h_1a85596f3eea4e187ef652eac88014726f">MOTOR_SECONDARY_LIFTER</link>,&#32;v);
35 }
36 
<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">45 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;v)&#32;{&#32;<link linkend="slew_8h_1a7dff2b79dffe55fb936d977594d7c01d">set_motor_slew</link>(<link linkend="motor__ports_8h_1a0cbefbf749abca03437a97c9ca45863a">MOTOR_LIFT</link>,&#32;v);&#32;}
46 
<link linkend="lifter_8c_1abddc7cb502e12fa277b627c90a45efb1">54 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1abddc7cb502e12fa277b627c90a45efb1">set_lifter_pos</link>(<emphasis class="keywordtype">int</emphasis>&#32;pos)&#32;{}
55 
<link linkend="lifter_8c_1a2e2bd38b5b8b52378f3510368bf8aa0a">62 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a2e2bd38b5b8b52378f3510368bf8aa0a">raise_main_lifter</link>()&#32;{&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(<link linkend="motor__ports_8h_1ac2cd96d53dd3ba6407db6766c3d92b26">MAX_SPEED</link>);&#32;}
63 
<link linkend="lifter_8c_1ad36c37086a91046af4e6f619618b7719">70 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1ad36c37086a91046af4e6f619618b7719">lower_main_lifter</link>()&#32;{&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(<link linkend="motor__ports_8h_1ac2cd96d53dd3ba6407db6766c3d92b26">MAX_SPEED</link>);&#32;}
71 
<link linkend="lifter_8c_1a786f679ea48bb8c80e00fbac9a69911b">78 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a786f679ea48bb8c80e00fbac9a69911b">raise_secondary_lifter</link>()&#32;{&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(<link linkend="motor__ports_8h_1ad5f5efaa5cb771bd06da4bfe6046809e">MIN_SPEED</link>&#32;/&#32;1.5);&#32;}
79 
<link linkend="lifter_8c_1af76abbd394bf206ab56fa237d776f2b3">86 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1af76abbd394bf206ab56fa237d776f2b3">lower_secondary_lifter</link>()&#32;{&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(<link linkend="motor__ports_8h_1ac2cd96d53dd3ba6407db6766c3d92b26">MAX_SPEED</link>);&#32;}
87 
<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">88 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
89 
<link linkend="lifter_8c_1adfb6207ee1f20953058c8de81ec3386a">90 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1adfb6207ee1f20953058c8de81ec3386a">main_lifter_update</link>()&#32;{
91 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link>)
92 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
93 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
94 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;pid_on&#32;=&#32;<emphasis class="keyword">false</emphasis>;
95 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_target&#32;=&#32;0;
96 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_motor_speed&#32;=&#32;0;
97 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;main_i&#32;=&#32;0;
98 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(count&#32;==&#32;20)&#32;{
99 &#32;&#32;&#32;&#32;main_target&#32;=&#32;analogRead(<link linkend="lifter_8h_1a82799bdc8f8a1a7a38785b446bdd6a9a">MAIN_LIFTER_POT</link>);
100 &#32;&#32;}
101 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(pid_on&#32;&amp;&amp;&#32;count&#32;&gt;&#32;20)&#32;{
102 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;curr&#32;=&#32;analogRead(<link linkend="lifter_8h_1a82799bdc8f8a1a7a38785b446bdd6a9a">MAIN_LIFTER_POT</link>);
103 &#32;&#32;&#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_last_p&#32;=&#32;0;
104 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_p&#32;=&#32;curr&#32;-&#32;main_target;
105 &#32;&#32;&#32;&#32;main_i&#32;+=&#32;main_p;
106 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_d&#32;=&#32;main_last_p&#32;-&#32;main_p;
107 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;main_motor_speed&#32;=&#32;MAIN_LIFTER_P&#32;*&#32;main_p&#32;+&#32;MAIN_LIFTER_I&#32;*&#32;main_i&#32;+</emphasis>
108 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;MAIN_LIFTER_D&#32;*&#32;main_d;</emphasis>
109 &#32;&#32;&#32;&#32;main_last_p&#32;=&#32;main_p;
110 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
111 &#32;&#32;&#32;&#32;main_i&#32;=&#32;0;
112 &#32;&#32;&#32;&#32;count++;
113 &#32;&#32;}
114 
115 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(joystickGetDigital(<link linkend="lifter_8h_1a96a5c0bbb7527bf1d45818fc4db97b68">LIFTER_UP</link>))&#32;{
116 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ultra&#32;=&#32;ultrasonicGet(<link linkend="lifter_8c_1a5dfaf05eb7e97b2e29d04eb068f9c240">lifter_ultrasonic</link>);
117 &#32;&#32;&#32;&#32;main_motor_speed&#32;=&#32;<link linkend="motor__ports_8h_1ac2cd96d53dd3ba6407db6766c3d92b26">MAX_SPEED</link>;
118 &#32;&#32;&#32;&#32;count&#32;=&#32;0;
119 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(joystickGetDigital(<link linkend="lifter_8h_1a12f8c1de242a92f5694e6b80b990773a">LIFTER_DOWN</link>))&#32;{
120 &#32;&#32;&#32;&#32;main_motor_speed&#32;=&#32;<link linkend="motor__ports_8h_1ad5f5efaa5cb771bd06da4bfe6046809e">MIN_SPEED</link>;
121 &#32;&#32;&#32;&#32;count&#32;=&#32;0;
122 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
123 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
124 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
125 &#32;&#32;}
126 &#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(main_motor_speed);
127 &#32;&#32;pid_on&#32;=&#32;<emphasis class="keyword">true</emphasis>;
128 }
129 
<link linkend="lifter_8c_1ac59fe6ffc80bab7f117ec0a8e482277b">130 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1ac59fe6ffc80bab7f117ec0a8e482277b">secondary_lifter_update</link>()&#32;{
131 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link>)
132 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
133 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
134 &#32;&#32;<emphasis class="comment">//&#32;static&#32;bool&#32;pid_on&#32;=&#32;false;</emphasis>
135 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_target&#32;=&#32;0;
136 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_motor_speed&#32;=&#32;0;
137 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;second_i&#32;=&#32;0;
138 
139 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(count&#32;&lt;&#32;10)&#32;{
140 &#32;&#32;&#32;&#32;second_target&#32;=&#32;analogRead(<link linkend="lifter_8h_1a72522c3c839198d275d956af1b759ff3">SECONDARY_LIFTER_POT_PORT</link>);
141 &#32;&#32;&#32;&#32;count++;
142 &#32;&#32;}
143 
144 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;curr&#32;=&#32;analogRead(<link linkend="lifter_8h_1a72522c3c839198d275d956af1b759ff3">SECONDARY_LIFTER_POT_PORT</link>);
145 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_last_p&#32;=&#32;0;
146 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_p&#32;=&#32;curr&#32;-&#32;second_target;
147 &#32;&#32;second_i&#32;+=&#32;second_p;
148 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_d&#32;=&#32;second_last_p&#32;-&#32;second_p;
149 &#32;&#32;second_motor_speed&#32;=&#32;<link linkend="lifter_8h_1a63dd166fe901eb29af4888c0c1a74117">SECONDARY_LIFTER_P</link>&#32;*&#32;second_p&#32;+
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="lifter_8h_1a7d8b61f7c2fc97e6cfeb3feabd3b8260">SECONDARY_LIFTER_I</link>&#32;*&#32;second_i&#32;+
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="lifter_8h_1a3ff007feb4abe2a93cb3a25f4808c787">SECONDARY_LIFTER_D</link>&#32;*&#32;second_d;
152 &#32;&#32;second_last_p&#32;=&#32;second_p;
153 
154 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(joystickGetDigital(<link linkend="lifter_8h_1a18b69ad14b64769ce9e96b5a3046c0d9">SECONDARY_LIFTER_DOWN</link>))&#32;{
155 &#32;&#32;&#32;&#32;second_motor_speed&#32;=&#32;<link linkend="motor__ports_8h_1ac2cd96d53dd3ba6407db6766c3d92b26">MAX_SPEED</link>;
156 &#32;&#32;&#32;&#32;count&#32;=&#32;0;
157 &#32;&#32;&#32;&#32;second_i&#32;=&#32;0;
158 &#32;&#32;&#32;&#32;second_target&#32;=&#32;analogRead(<link linkend="lifter_8h_1a72522c3c839198d275d956af1b759ff3">SECONDARY_LIFTER_POT_PORT</link>);
159 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(joystickGetDigital(<link linkend="lifter_8h_1a69dbccd126807ef1c7b3994bb96c687d">SECONDARY_LIFTER_UP</link>))&#32;{
160 &#32;&#32;&#32;&#32;second_motor_speed&#32;=&#32;<link linkend="motor__ports_8h_1ad5f5efaa5cb771bd06da4bfe6046809e">MIN_SPEED</link>;
161 &#32;&#32;&#32;&#32;count&#32;=&#32;0;
162 &#32;&#32;&#32;&#32;second_i&#32;=&#32;0;
163 &#32;&#32;&#32;&#32;second_target&#32;=
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second_target&#32;&gt;&#32;3000&#32;?&#32;4095&#32;:&#32;analogRead(<link linkend="lifter_8h_1a72522c3c839198d275d956af1b759ff3">SECONDARY_LIFTER_POT_PORT</link>);
165 &#32;&#32;&#32;&#32;;
166 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
167 &#32;&#32;&#32;&#32;second_target&#32;=&#32;second_target&#32;&gt;&#32;3000&#32;?&#32;4095&#32;:&#32;second_target;
168 &#32;&#32;}
169 &#32;&#32;second_motor_speed&#32;=&#32;abs(second_motor_speed)&#32;&lt;&#32;20&#32;?&#32;0&#32;:&#32;second_motor_speed;
170 &#32;&#32;<emphasis class="comment">/*printf(&quot;Motor&#32;%d&#32;\n&quot;,&#32;second_motor_speed);</emphasis>
171 <emphasis class="comment">&#32;&#32;printf(&quot;P&#32;%d&#32;\n&quot;,&#32;second_p);</emphasis>
172 <emphasis class="comment">&#32;&#32;printf(&quot;I&#32;%lld&#32;\n&quot;,&#32;second_i);</emphasis>
173 <emphasis class="comment">&#32;&#32;printf(&quot;D&#32;%d&#32;\n&quot;,&#32;second_d);*/</emphasis>
174 &#32;&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(second_motor_speed);
175 }
176 
<link linkend="lifter_8c_1a59bb7413777ca16aba124aaedf95c79b">183 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a59bb7413777ca16aba124aaedf95c79b">update_lifter</link>()&#32;{
184 &#32;&#32;<link linkend="lifter_8c_1adfb6207ee1f20953058c8de81ec3386a">main_lifter_update</link>();
185 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link>)
186 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1ac59fe6ffc80bab7f117ec0a8e482277b">secondary_lifter_update</link>();
187 }
<link linkend="lifter_8c_1ab0460888f3213e5510bd25ae1e152a75">196 </link><emphasis class="keywordtype">float</emphasis>&#32;<link linkend="lifter_8c_1ab0460888f3213e5510bd25ae1e152a75">lifterPotentiometerToDegree</link>(<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="structcord_1a2eef9b681474b679cf87b0c20eced2cd">x</link>)&#32;{
197 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(x&#32;-&#32;<link linkend="lifter_8h_1a0685a3cee7d5cabe98d2c9c97bed5727">INIT_ROTATION</link>)&#32;/&#32;<link linkend="potentiometer_8h_1ad40f2bbc4e57baed2d9e900750d94a7f">TICK_MAX</link>&#32;*&#32;<link linkend="potentiometer_8h_1ab77b81696cf83be632fca5f56b4c3595">DEG_MAX</link>;
198 }
199 
<link linkend="lifter_8c_1acdf909159b0406c48099843f2306be78">207 </link><emphasis class="keywordtype">int</emphasis>&#32;<link linkend="lifter_8c_1acdf909159b0406c48099843f2306be78">getLifterTicks</link>()&#32;{&#32;<emphasis class="keywordflow">return</emphasis>&#32;analogRead(<link linkend="sensor__ports_8h_1a1968b8c13fa0757cc721c96a67407d9b">LIFTER</link>);&#32;}
208 
<link linkend="lifter_8c_1a2719740958fd8a5926f88f6194e820e3">216 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="lifter_8c_1a2719740958fd8a5926f88f6194e820e3">getLifterHeight</link>()&#32;{
217 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;ticks&#32;=&#32;<link linkend="lifter_8c_1acdf909159b0406c48099843f2306be78">getLifterTicks</link>();
218 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(-2&#32;*&#32;pow(10,&#32;(-9&#32;*&#32;ticks))&#32;+&#32;6&#32;*&#32;(pow(10,&#32;(-6&#32;*&#32;ticks&#32;*&#32;ticks)))&#32;+
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.0198&#32;*&#32;ticks&#32;+&#32;2.3033);
220 }
    </computeroutput></literallayout>
</section>
