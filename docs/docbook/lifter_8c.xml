<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="lifter_8c">
    <title>lifter.c File Reference</title>
<para>Include dependency diagram for lifter.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="lifter_8c__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for lifter.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="lifter_8c__dep__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Variables</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static bool <link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static bool <link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a8a64fa88b389b39c236c5c57a7fb5c67">autostack_routine</link> (
void * param)<para><emphasis>Autostacks a cone once picked up.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="lifter_8c_1a2719740958fd8a5926f88f6194e820e3">getLifterHeight</link> (
)<para><emphasis>Gets the height of the lifter in inches.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="lifter_8c_1acdf909159b0406c48099843f2306be78">getLifterTicks</link> (
)<para><emphasis>Gets the value of the lifter pot.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a3738d33dc870f98243a93bddd855b43e">interrupt_auto_stack</link> (
void * param)<para><emphasis>Stpos an autostack in case of an error.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>float <link linkend="lifter_8c_1ab0460888f3213e5510bd25ae1e152a75">lifterPotentiometerToDegree</link> (
int x)<para><emphasis>height of the lifter in degrees from 0 height</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1ad36c37086a91046af4e6f619618b7719">lower_main_lifter</link> (
)<para><emphasis>Lowers the main lifter.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1af76abbd394bf206ab56fa237d776f2b3">lower_secondary_lifter</link> (
)<para><emphasis>Lowers the secondary lifter.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static void <link linkend="lifter_8c_1adfb6207ee1f20953058c8de81ec3386a">main_lifter_update</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static void <link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a2e2bd38b5b8b52378f3510368bf8aa0a">raise_main_lifter</link> (
)<para><emphasis>Raises the main lifter.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a786f679ea48bb8c80e00fbac9a69911b">raise_secondary_lifter</link> (
)<para><emphasis>Raises the main lifter.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static void <link linkend="lifter_8c_1ac59fe6ffc80bab7f117ec0a8e482277b">secondary_lifter_update</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1abddc7cb502e12fa277b627c90a45efb1">set_lifter_pos</link> (
int pos)<para><emphasis>Sets the lifter positions to the given value.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link> (
const int v)<para><emphasis>Sets the main lifter motors to the given value.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link> (
const int v)<para><emphasis>Sets the secondary lifter motors to the given value.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="lifter_8c_1a59bb7413777ca16aba124aaedf95c79b">update_lifter</link> (
)<para><emphasis>Updates the lifter in teleop.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /Users/chrisjerrett/Desktop/InTheZoneA/src/lifter.c</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="lifter_8h">lifter.h</link>&quot;</emphasis>
2 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="claw_8h">claw.h</link>&quot;</emphasis>
3 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="log_8h">log.h</link>&quot;</emphasis>
4 
<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">5 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">6 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
7 
<link linkend="lifter_8c_1a3738d33dc870f98243a93bddd855b43e">8 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a3738d33dc870f98243a93bddd855b43e">interrupt_auto_stack</link>(<emphasis class="keywordtype">void</emphasis>&#32;*param)&#32;{
9 &#32;&#32;<link linkend="log_8h_1a1606d750e1bb8de9f9e917172bba3382">info</link>(<emphasis class="stringliteral">&quot;int&quot;</emphasis>);
10 &#32;&#32;<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>&#32;=&#32;<emphasis class="keyword">true</emphasis>;
11 }
12 
<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">13 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keyword">inline</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>()&#32;{
14 &#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(0);
15 &#32;&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(0);
16 &#32;&#32;<link linkend="claw_8h_1a3a57f998b1884d39b0cc786689f7086f">set_claw_motor</link>(0);
17 &#32;&#32;<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
18 }
19 
<link linkend="lifter_8c_1a8a64fa88b389b39c236c5c57a7fb5c67">20 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a8a64fa88b389b39c236c5c57a7fb5c67">autostack_routine</link>(<emphasis class="keywordtype">void</emphasis>&#32;*param)&#32;{
21 &#32;&#32;<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
22 &#32;&#32;<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link>&#32;=&#32;<emphasis class="keyword">true</emphasis>;
23 &#32;&#32;<link linkend="lifter_8c_1a786f679ea48bb8c80e00fbac9a69911b">raise_secondary_lifter</link>();
24 &#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(SECONDARY_LIFTER_POT_PORT)&#32;&lt;&#32;1600)&#32;{
25 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(MIN_SPEED);
26 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>)&#32;{
27 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>();
28 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
29 &#32;&#32;&#32;&#32;}
30 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a1c59207742a1acf45a8957d7f04f9dfe">delay</link>(50);
31 &#32;&#32;&#32;&#32;<link linkend="log_8h_1a1606d750e1bb8de9f9e917172bba3382">info</link>(<emphasis class="stringliteral">&quot;1&quot;</emphasis>);
32 &#32;&#32;}
33 &#32;&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(0);
34 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;lifted&#32;=&#32;<emphasis class="keyword">false</emphasis>;
35 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;val&#32;=&#32;<link linkend="_a_p_i_8h_1a435d7fc1c3c3da80ed64cf9dfed0bd42">ultrasonicGet</link>(<link linkend="sensors_8h_1a5dfaf05eb7e97b2e29d04eb068f9c240">lifter_ultrasonic</link>);
36 &#32;&#32;<link linkend="_a_p_i_8h_1a403c82418e475fa4a8273719e6a7f3e6">printf</link>(<emphasis class="stringliteral">&quot;%d\n&quot;</emphasis>,&#32;val);
37 &#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(val&#32;&lt;&#32;10&#32;&amp;&amp;&#32;val&#32;!=&#32;ULTRA_BAD_RESPONSE)&#32;{
38 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>)&#32;{
39 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>();
40 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
41 &#32;&#32;&#32;&#32;}
42 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(MAX_SPEED);
43 &#32;&#32;&#32;&#32;<link linkend="log_8h_1a1606d750e1bb8de9f9e917172bba3382">info</link>(<emphasis class="stringliteral">&quot;2&quot;</emphasis>);
44 &#32;&#32;&#32;&#32;lifted&#32;=&#32;<emphasis class="keyword">true</emphasis>;
45 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a1c59207742a1acf45a8957d7f04f9dfe">delay</link>(50);
46 &#32;&#32;&#32;&#32;val&#32;=&#32;<link linkend="_a_p_i_8h_1a435d7fc1c3c3da80ed64cf9dfed0bd42">ultrasonicGet</link>(<link linkend="sensors_8h_1a5dfaf05eb7e97b2e29d04eb068f9c240">lifter_ultrasonic</link>);
47 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a403c82418e475fa4a8273719e6a7f3e6">printf</link>(<emphasis class="stringliteral">&quot;%d\n&quot;</emphasis>,&#32;val);
48 &#32;&#32;}
49 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>)&#32;{
50 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>();
51 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
52 &#32;&#32;}
53 &#32;&#32;<link linkend="_a_p_i_8h_1a1c59207742a1acf45a8957d7f04f9dfe">delay</link>(200);
54 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(lifted)
55 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a1c59207742a1acf45a8957d7f04f9dfe">delay</link>(50);
56 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>)&#32;{
57 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>();
58 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
59 &#32;&#32;}
60 &#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(0);
61 &#32;&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(0);
62 
63 &#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(SECONDARY_LIFTER_POT_PORT)&#32;&lt;&#32;3000)&#32;{
64 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>)&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>();
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
67 &#32;&#32;&#32;&#32;}
68 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(MIN_SPEED);
69 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a1c59207742a1acf45a8957d7f04f9dfe">delay</link>(50);
70 &#32;&#32;&#32;&#32;<link linkend="log_8h_1a1606d750e1bb8de9f9e917172bba3382">info</link>(<emphasis class="stringliteral">&quot;3&quot;</emphasis>);
71 &#32;&#32;}
72 
73 &#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(MIN_SPEED&#32;/&#32;1.333);
74 
75 &#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(val&#32;&gt;&#32;10)&#32;{
76 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>)&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>();
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
79 &#32;&#32;&#32;&#32;}
80 &#32;&#32;&#32;&#32;<link linkend="log_8h_1a1606d750e1bb8de9f9e917172bba3382">info</link>(<emphasis class="stringliteral">&quot;2&quot;</emphasis>);
81 &#32;&#32;&#32;&#32;lifted&#32;=&#32;<emphasis class="keyword">true</emphasis>;
82 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a1c59207742a1acf45a8957d7f04f9dfe">delay</link>(30);
83 &#32;&#32;&#32;&#32;val&#32;=&#32;<link linkend="_a_p_i_8h_1a435d7fc1c3c3da80ed64cf9dfed0bd42">ultrasonicGet</link>(<link linkend="sensors_8h_1a5dfaf05eb7e97b2e29d04eb068f9c240">lifter_ultrasonic</link>);
84 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a403c82418e475fa4a8273719e6a7f3e6">printf</link>(<emphasis class="stringliteral">&quot;%d\n&quot;</emphasis>,&#32;val);
85 &#32;&#32;}
86 
87 &#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(0);
88 
89 &#32;&#32;<link linkend="claw_8h_1a3a57f998b1884d39b0cc786689f7086f">set_claw_motor</link>(MIN_CLAW_SPEED);
90 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>)&#32;{
91 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>();
92 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
93 &#32;&#32;}
94 &#32;&#32;<link linkend="_a_p_i_8h_1a1c59207742a1acf45a8957d7f04f9dfe">delay</link>(500);
95 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>)&#32;{
96 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>();
97 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
98 &#32;&#32;}
99 &#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(MAX_SPEED);
100 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1afbf11bb950aeb7975e91d0675a0820bc">lifter_autostack_routine_interupt</link>)&#32;{
101 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1aa4d172cbde795bc13fe6baabd074717e">quit_auto_static</link>();
102 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
103 &#32;&#32;}
104 &#32;&#32;<link linkend="_a_p_i_8h_1a1c59207742a1acf45a8957d7f04f9dfe">delay</link>(300);
105 
106 &#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(MIN_SPEED);
107 &#32;&#32;<link linkend="claw_8h_1a3a57f998b1884d39b0cc786689f7086f">set_claw_motor</link>(0);
108 &#32;&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(0);
109 
110 &#32;&#32;<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
111 }
112 
<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">121 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;v)&#32;{
122 &#32;&#32;<link linkend="slew_8h_1a9f8b8ae577ef938622024545711f0151">set_motor_immediate</link>(MOTOR_SECONDARY_LIFTER,&#32;v);
123 }
124 
<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">133 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;v)&#32;{
134 &#32;&#32;<link linkend="slew_8h_1a7dff2b79dffe55fb936d977594d7c01d">set_motor_slew</link>(MOTOR_MAIN_LIFTER,&#32;v);
135 }
136 
<link linkend="lifter_8c_1abddc7cb502e12fa277b627c90a45efb1">144 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1abddc7cb502e12fa277b627c90a45efb1">set_lifter_pos</link>(<emphasis class="keywordtype">int</emphasis>&#32;pos)&#32;{}
145 
<link linkend="lifter_8c_1a2e2bd38b5b8b52378f3510368bf8aa0a">152 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a2e2bd38b5b8b52378f3510368bf8aa0a">raise_main_lifter</link>()&#32;{&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(MAX_SPEED);&#32;}
153 
<link linkend="lifter_8c_1ad36c37086a91046af4e6f619618b7719">160 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1ad36c37086a91046af4e6f619618b7719">lower_main_lifter</link>()&#32;{&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(MAX_SPEED);&#32;}
161 
<link linkend="lifter_8c_1a786f679ea48bb8c80e00fbac9a69911b">168 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a786f679ea48bb8c80e00fbac9a69911b">raise_secondary_lifter</link>()&#32;{&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(MIN_SPEED&#32;/&#32;1.5);&#32;}
169 
<link linkend="lifter_8c_1af76abbd394bf206ab56fa237d776f2b3">176 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1af76abbd394bf206ab56fa237d776f2b3">lower_secondary_lifter</link>()&#32;{&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(MAX_SPEED);&#32;}
177 
<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">178 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
179 
<link linkend="lifter_8c_1adfb6207ee1f20953058c8de81ec3386a">180 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1adfb6207ee1f20953058c8de81ec3386a">main_lifter_update</link>()&#32;{
181 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link>)&#32;{
182 &#32;&#32;&#32;&#32;<link linkend="log_8h_1a8e5bb8a2a372f5b066ff7af7044584c1">error</link>(<emphasis class="stringliteral">&quot;True&quot;</emphasis>);
183 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
184 &#32;&#32;}
185 &#32;&#32;<link linkend="log_8h_1a8e5bb8a2a372f5b066ff7af7044584c1">error</link>(<emphasis class="stringliteral">&quot;1&quot;</emphasis>);
186 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
187 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;pid_on&#32;=&#32;<emphasis class="keyword">false</emphasis>;
188 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_target&#32;=&#32;0;
189 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_motor_speed&#32;=&#32;0;
190 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;main_i&#32;=&#32;0;
191 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(count&#32;==&#32;20)&#32;{
192 &#32;&#32;&#32;&#32;main_target&#32;=&#32;<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(MAIN_LIFTER_POT);
193 &#32;&#32;}
194 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(pid_on&#32;&amp;&amp;&#32;count&#32;&gt;&#32;20)&#32;{
195 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;curr&#32;=&#32;<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(MAIN_LIFTER_POT);
196 &#32;&#32;&#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_last_p&#32;=&#32;0;
197 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_p&#32;=&#32;curr&#32;-&#32;main_target;
198 &#32;&#32;&#32;&#32;main_i&#32;+=&#32;main_p;
199 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;main_d&#32;=&#32;main_last_p&#32;-&#32;main_p;
200 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;main_motor_speed&#32;=&#32;MAIN_LIFTER_P&#32;*&#32;main_p&#32;+&#32;MAIN_LIFTER_I&#32;*&#32;main_i&#32;+</emphasis>
201 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;MAIN_LIFTER_D&#32;*&#32;main_d;</emphasis>
202 &#32;&#32;&#32;&#32;main_last_p&#32;=&#32;main_p;
203 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
204 &#32;&#32;&#32;&#32;main_i&#32;=&#32;0;
205 &#32;&#32;&#32;&#32;count++;
206 &#32;&#32;}
207 &#32;&#32;<link linkend="log_8h_1a8e5bb8a2a372f5b066ff7af7044584c1">error</link>(<emphasis class="stringliteral">&quot;2&quot;</emphasis>);
208 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="_a_p_i_8h_1a792f1a80c62a63e764cf64aabf95db92">joystickGetDigital</link>(LIFTER_UP))&#32;{
209 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ultra&#32;=&#32;<link linkend="_a_p_i_8h_1a435d7fc1c3c3da80ed64cf9dfed0bd42">ultrasonicGet</link>(<link linkend="sensors_8h_1a5dfaf05eb7e97b2e29d04eb068f9c240">lifter_ultrasonic</link>);
210 &#32;&#32;&#32;&#32;main_motor_speed&#32;=&#32;MAX_SPEED;
211 &#32;&#32;&#32;&#32;count&#32;=&#32;0;
212 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="_a_p_i_8h_1a792f1a80c62a63e764cf64aabf95db92">joystickGetDigital</link>(LIFTER_DOWN))&#32;{
213 &#32;&#32;&#32;&#32;main_motor_speed&#32;=&#32;MIN_SPEED;
214 &#32;&#32;&#32;&#32;count&#32;=&#32;0;
215 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
216 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
217 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link>&#32;=&#32;<emphasis class="keyword">false</emphasis>;
218 &#32;&#32;}
219 &#32;&#32;<link linkend="lifter_8c_1ad00a195af30f246924d6e1a30095b882">set_main_lifter_motors</link>(main_motor_speed);
220 &#32;&#32;pid_on&#32;=&#32;<emphasis class="keyword">true</emphasis>;
221 }
222 
<link linkend="lifter_8c_1ac59fe6ffc80bab7f117ec0a8e482277b">223 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1ac59fe6ffc80bab7f117ec0a8e482277b">secondary_lifter_update</link>()&#32;{
224 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="lifter_8c_1ae1fc3deab25f0b9e6f636bb83e9bf5c2">lifter_autostack_running</link>)
225 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
226 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
227 &#32;&#32;<emphasis class="comment">//&#32;static&#32;bool&#32;pid_on&#32;=&#32;false;</emphasis>
228 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_target&#32;=&#32;0;
229 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_motor_speed&#32;=&#32;0;
230 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;second_i&#32;=&#32;0;
231 
232 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(count&#32;&lt;&#32;10)&#32;{
233 &#32;&#32;&#32;&#32;second_target&#32;=&#32;<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(SECONDARY_LIFTER_POT_PORT);
234 &#32;&#32;&#32;&#32;count++;
235 &#32;&#32;}
236 
237 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;curr&#32;=&#32;<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(SECONDARY_LIFTER_POT_PORT);
238 &#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_last_p&#32;=&#32;0;
239 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_p&#32;=&#32;curr&#32;-&#32;second_target;
240 &#32;&#32;second_i&#32;+=&#32;second_p;
241 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;second_d&#32;=&#32;second_last_p&#32;-&#32;second_p;
242 &#32;&#32;second_motor_speed&#32;=&#32;SECONDARY_LIFTER_P&#32;*&#32;second_p&#32;+
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SECONDARY_LIFTER_I&#32;*&#32;second_i&#32;+
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SECONDARY_LIFTER_D&#32;*&#32;second_d;
245 &#32;&#32;second_last_p&#32;=&#32;second_p;
246 
247 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="_a_p_i_8h_1a792f1a80c62a63e764cf64aabf95db92">joystickGetDigital</link>(SECONDARY_LIFTER_DOWN))&#32;{
248 &#32;&#32;&#32;&#32;second_motor_speed&#32;=&#32;MAX_SPEED;
249 &#32;&#32;&#32;&#32;count&#32;=&#32;0;
250 &#32;&#32;&#32;&#32;second_i&#32;=&#32;0;
251 &#32;&#32;&#32;&#32;second_target&#32;=&#32;<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(SECONDARY_LIFTER_POT_PORT);
252 &#32;&#32;&#32;&#32;<link linkend="claw_8h_1a3a6168bf4e2042115dd32542f1f6a2f5">claw_grab_cone</link>();
253 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="_a_p_i_8h_1a792f1a80c62a63e764cf64aabf95db92">joystickGetDigital</link>(SECONDARY_LIFTER_UP))&#32;{
254 &#32;&#32;&#32;&#32;second_motor_speed&#32;=&#32;MIN_SPEED;
255 &#32;&#32;&#32;&#32;count&#32;=&#32;0;
256 &#32;&#32;&#32;&#32;second_i&#32;=&#32;0;
257 &#32;&#32;&#32;&#32;second_target&#32;=
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second_target&#32;&gt;&#32;3000&#32;?&#32;4095&#32;:&#32;<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(SECONDARY_LIFTER_POT_PORT);
259 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
260 &#32;&#32;&#32;&#32;second_target&#32;=&#32;second_target&#32;&gt;&#32;3000&#32;?&#32;4095&#32;:&#32;second_target;
261 &#32;&#32;}
262 &#32;&#32;second_motor_speed&#32;=&#32;abs(second_motor_speed)&#32;&lt;&#32;20&#32;?&#32;0&#32;:&#32;second_motor_speed;
263 &#32;&#32;<link linkend="lifter_8c_1a78640d547d9361951a92d0bc00939536">set_secondary_lifter_motors</link>(second_motor_speed);
264 }
265 
<link linkend="lifter_8c_1a59bb7413777ca16aba124aaedf95c79b">272 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="lifter_8c_1a59bb7413777ca16aba124aaedf95c79b">update_lifter</link>()&#32;{
273 &#32;&#32;<link linkend="_a_p_i_8h_1a403c82418e475fa4a8273719e6a7f3e6">printf</link>(<emphasis class="stringliteral">&quot;%d&#32;\n&quot;</emphasis>,&#32;<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(SECONDARY_LIFTER_POT_PORT));
274 &#32;&#32;<link linkend="lifter_8c_1adfb6207ee1f20953058c8de81ec3386a">main_lifter_update</link>();
275 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!<link linkend="lifter_8c_1ad0dce62ab81a71d1c53831e375cde64c">secondary_override</link>)
276 &#32;&#32;&#32;&#32;<link linkend="lifter_8c_1ac59fe6ffc80bab7f117ec0a8e482277b">secondary_lifter_update</link>();
277 }
<link linkend="lifter_8c_1ab0460888f3213e5510bd25ae1e152a75">286 </link><emphasis class="keywordtype">float</emphasis>&#32;<link linkend="lifter_8c_1ab0460888f3213e5510bd25ae1e152a75">lifterPotentiometerToDegree</link>(<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="structcord_1a2eef9b681474b679cf87b0c20eced2cd">x</link>)&#32;{
287 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(x&#32;-&#32;INIT_ROTATION)&#32;/&#32;TICK_MAX&#32;*&#32;DEG_MAX;
288 }
289 
<link linkend="lifter_8c_1acdf909159b0406c48099843f2306be78">297 </link><emphasis class="keywordtype">int</emphasis>&#32;<link linkend="lifter_8c_1acdf909159b0406c48099843f2306be78">getLifterTicks</link>()&#32;{&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="_a_p_i_8h_1a5da86064604c539c2b6a5e2993289108">analogRead</link>(LIFTER);&#32;}
298 
<link linkend="lifter_8c_1a2719740958fd8a5926f88f6194e820e3">306 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="lifter_8c_1a2719740958fd8a5926f88f6194e820e3">getLifterHeight</link>()&#32;{
307 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;ticks&#32;=&#32;<link linkend="lifter_8c_1acdf909159b0406c48099843f2306be78">getLifterTicks</link>();
308 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(-2&#32;*&#32;pow(10,&#32;(-9&#32;*&#32;ticks))&#32;+&#32;6&#32;*&#32;(pow(10,&#32;(-6&#32;*&#32;ticks&#32;*&#32;ticks)))&#32;+
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.0198&#32;*&#32;ticks&#32;+&#32;2.3033);
310 }
    </computeroutput></literallayout>
</section>
