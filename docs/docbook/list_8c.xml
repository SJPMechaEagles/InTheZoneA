<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="list_8c">
    <title>list.c File Reference</title>
<para>Include dependency diagram for list.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="list_8c__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for list.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="list_8c__dep__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="list_8h_1ad8b8636e2e25308b521b32071e849c80">list_node_t</link> * <link linkend="list_8c_1ab3dacc64ceb63b0a0849312b0a14c91c">list_at</link> (
<link linkend="structlist__t">list_t</link> * self, int index)<para><emphasis>Finds a node a given index.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="list_8c_1ac2d2be572a896cccd0e76d56eeefcbdb">list_destroy</link> (
<link linkend="structlist__t">list_t</link> * self)<para><emphasis>Deallocates a list.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="list_8h_1ad8b8636e2e25308b521b32071e849c80">list_node_t</link> * <link linkend="list_8c_1a5d73352b7bfa0c5a8b33289d7b27a374">list_find</link> (
<link linkend="structlist__t">list_t</link> * self, void * val)<para><emphasis>Finds a node in a list with a given value.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="list_8h_1ad8b8636e2e25308b521b32071e849c80">list_node_t</link> * <link linkend="list_8c_1a97f6f9590b1cdedd5367b9139e9cc4ef">list_lpop</link> (
<link linkend="structlist__t">list_t</link> * self)<para><emphasis>removes and returns the start node</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="list_8h_1ad8b8636e2e25308b521b32071e849c80">list_node_t</link> * <link linkend="list_8c_1a7e1b077416813dd474a54826347f7502">list_lpush</link> (
<link linkend="structlist__t">list_t</link> * self, <link linkend="list_8h_1ad8b8636e2e25308b521b32071e849c80">list_node_t</link> * node)<para><emphasis>Pushed a node to the start of a list.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="structlist__t">list_t</link> * <link linkend="list_8c_1a9dd3eafdb56dcc64689f78fb4acdff3f">list_new</link> (
)<para><emphasis>Allocated a new list.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="list_8c_1a5ef7843a8a481124bce3e93541ba379a">list_remove</link> (
<link linkend="structlist__t">list_t</link> * self, <link linkend="list_8h_1ad8b8636e2e25308b521b32071e849c80">list_node_t</link> * node)<para><emphasis>removes and returns the a given node from the list</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="list_8h_1ad8b8636e2e25308b521b32071e849c80">list_node_t</link> * <link linkend="list_8c_1a53460b319b561ce2201bbf95450f1af7">list_rpop</link> (
<link linkend="structlist__t">list_t</link> * self)<para><emphasis>removes and returns the end node</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="list_8h_1ad8b8636e2e25308b521b32071e849c80">list_node_t</link> * <link linkend="list_8c_1a4edfa9b7742154bff4fc2cb05d044af9">list_rpush</link> (
<link linkend="structlist__t">list_t</link> * self, <link linkend="list_8h_1ad8b8636e2e25308b521b32071e849c80">list_node_t</link> * node)<para><emphasis>Pushed a node to the end of a list.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /Users/chrisjerrett/Desktop/InTheZoneA/src/list.c</para>
    </simplesect>
    <literallayout><computeroutput>
1 
25 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="list_8h">list.h</link>&quot;</emphasis>
26 <emphasis class="preprocessor">#include&#32;&lt;<link linkend="_a_p_i_8h">API.h</link>&gt;</emphasis>
27 
<link linkend="list_8c_1a9dd3eafdb56dcc64689f78fb4acdff3f">34 </link><link linkend="structlist__t">list_t</link>&#32;*<link linkend="list_8c_1a9dd3eafdb56dcc64689f78fb4acdff3f">list_new</link>()&#32;{
35 &#32;&#32;<link linkend="structlist__t">list_t</link>&#32;*<emphasis class="keyword">self</emphasis>;
36 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!(<emphasis class="keyword">self</emphasis>&#32;=&#32;(<link linkend="structlist__t">list_t</link>&#32;*)malloc(<emphasis class="keyword">sizeof</emphasis>(<link linkend="structlist__t">list_t</link>))))
37 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NULL;
38 &#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;<link linkend="structlist__t_1a93ef6d995af96e73e226dc2b8a7232aa">head</link>&#32;=&#32;NULL;
39 &#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;tail&#32;=&#32;NULL;
40 &#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;free&#32;=&#32;NULL;
41 &#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;match&#32;=&#32;NULL;
42 &#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;len&#32;=&#32;0;
43 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">self</emphasis>;
44 }
45 
46 <emphasis class="comment">/*</emphasis>
47 <emphasis class="comment">&#32;*&#32;Free&#32;the&#32;list.</emphasis>
48 <emphasis class="comment">&#32;*/</emphasis>
49 
<link linkend="list_8c_1ac2d2be572a896cccd0e76d56eeefcbdb">50 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="list_8c_1ac2d2be572a896cccd0e76d56eeefcbdb">list_destroy</link>(<link linkend="structlist__t">list_t</link>&#32;*<emphasis class="keyword">self</emphasis>)&#32;{
51 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;len&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;len;
52 &#32;&#32;<link linkend="structlist__node">list_node_t</link>&#32;*next;
53 &#32;&#32;<link linkend="structlist__node">list_node_t</link>&#32;*curr&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;head;
54 
55 &#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(len--)&#32;{
56 &#32;&#32;&#32;&#32;next&#32;=&#32;curr-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>;
57 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(self-&gt;free)
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;free(curr-&gt;<link linkend="structlist__node_1a129de89b4c110fa54377ef16ab128ce0">val</link>);
59 &#32;&#32;&#32;&#32;free(curr);
60 &#32;&#32;&#32;&#32;curr&#32;=&#32;next;
61 &#32;&#32;}
62 
63 &#32;&#32;free(<emphasis class="keyword">self</emphasis>);
64 }
65 
<link linkend="list_8c_1a4edfa9b7742154bff4fc2cb05d044af9">74 </link><link linkend="structlist__node">list_node_t</link>&#32;*<link linkend="list_8c_1a4edfa9b7742154bff4fc2cb05d044af9">list_rpush</link>(<link linkend="structlist__t">list_t</link>&#32;*<emphasis class="keyword">self</emphasis>,&#32;<link linkend="structlist__node">list_node_t</link>&#32;*node)&#32;{
75 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!node)
76 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NULL;
77 
78 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(self-&gt;len)&#32;{
79 &#32;&#32;&#32;&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;tail;
80 &#32;&#32;&#32;&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>&#32;=&#32;NULL;
81 &#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;tail-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>&#32;=&#32;node;
82 &#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;tail&#32;=&#32;node;
83 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
84 &#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;head&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;tail&#32;=&#32;node;
85 &#32;&#32;&#32;&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>&#32;=&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>&#32;=&#32;NULL;
86 &#32;&#32;}
87 
88 &#32;&#32;++<emphasis class="keyword">self</emphasis>-&gt;len;
89 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;node;
90 }
91 
<link linkend="list_8c_1a53460b319b561ce2201bbf95450f1af7">99 </link><link linkend="structlist__node">list_node_t</link>&#32;*<link linkend="list_8c_1a53460b319b561ce2201bbf95450f1af7">list_rpop</link>(<link linkend="structlist__t">list_t</link>&#32;*<emphasis class="keyword">self</emphasis>)&#32;{
100 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!self-&gt;len)
101 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NULL;
102 
103 &#32;&#32;<link linkend="structlist__node">list_node_t</link>&#32;*node&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;tail;
104 
105 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(--self-&gt;len)&#32;{
106 &#32;&#32;&#32;&#32;(<emphasis class="keyword">self</emphasis>-&gt;tail&#32;=&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>)-&gt;next&#32;=&#32;NULL;
107 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
108 &#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;tail&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;head&#32;=&#32;NULL;
109 &#32;&#32;}
110 
111 &#32;&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>&#32;=&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>&#32;=&#32;NULL;
112 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;node;
113 }
114 
<link linkend="list_8c_1a97f6f9590b1cdedd5367b9139e9cc4ef">122 </link><link linkend="structlist__node">list_node_t</link>&#32;*<link linkend="list_8c_1a97f6f9590b1cdedd5367b9139e9cc4ef">list_lpop</link>(<link linkend="structlist__t">list_t</link>&#32;*<emphasis class="keyword">self</emphasis>)&#32;{
123 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!self-&gt;len)
124 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NULL;
125 
126 &#32;&#32;<link linkend="structlist__node">list_node_t</link>&#32;*node&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;head;
127 
128 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(--self-&gt;len)&#32;{
129 &#32;&#32;&#32;&#32;(<emphasis class="keyword">self</emphasis>-&gt;head&#32;=&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>)-&gt;prev&#32;=&#32;NULL;
130 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
131 &#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;head&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;tail&#32;=&#32;NULL;
132 &#32;&#32;}
133 
134 &#32;&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>&#32;=&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>&#32;=&#32;NULL;
135 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;node;
136 }
137 
<link linkend="list_8c_1a7e1b077416813dd474a54826347f7502">146 </link><link linkend="structlist__node">list_node_t</link>&#32;*<link linkend="list_8c_1a7e1b077416813dd474a54826347f7502">list_lpush</link>(<link linkend="structlist__t">list_t</link>&#32;*<emphasis class="keyword">self</emphasis>,&#32;<link linkend="structlist__node">list_node_t</link>&#32;*node)&#32;{
147 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!node)
148 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NULL;
149 
150 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(self-&gt;len)&#32;{
151 &#32;&#32;&#32;&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;head;
152 &#32;&#32;&#32;&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>&#32;=&#32;NULL;
153 &#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;head-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>&#32;=&#32;node;
154 &#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;head&#32;=&#32;node;
155 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
156 &#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;head&#32;=&#32;<emphasis class="keyword">self</emphasis>-&gt;tail&#32;=&#32;node;
157 &#32;&#32;&#32;&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>&#32;=&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>&#32;=&#32;NULL;
158 &#32;&#32;}
159 
160 &#32;&#32;++<emphasis class="keyword">self</emphasis>-&gt;len;
161 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;node;
162 }
163 
<link linkend="list_8c_1a5d73352b7bfa0c5a8b33289d7b27a374">172 </link><link linkend="structlist__node">list_node_t</link>&#32;*<link linkend="list_8c_1a5d73352b7bfa0c5a8b33289d7b27a374">list_find</link>(<link linkend="structlist__t">list_t</link>&#32;*<emphasis class="keyword">self</emphasis>,&#32;<emphasis class="keywordtype">void</emphasis>&#32;*val)&#32;{
173 &#32;&#32;<link linkend="structlist__iterator__t">list_iterator_t</link>&#32;*it&#32;=&#32;<link linkend="list_8h_1a3c956afda343b4a6aaf68fbd4b446733">list_iterator_new</link>(<emphasis class="keyword">self</emphasis>,&#32;<link linkend="list_8h_1a2c3af7de0b7ab9c3a84fbc039e75ec66abdf0fd732c6a91b57c5cbea177f1ae00">LIST_HEAD</link>);
174 &#32;&#32;<link linkend="structlist__node">list_node_t</link>&#32;*node;
175 
176 &#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;((node&#32;=&#32;<link linkend="list_8h_1a2e5db981e32d3aef49ea79505a0615a6">list_iterator_next</link>(it)))&#32;{
177 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(self-&gt;match)&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(self-&gt;match(val,&#32;node-&gt;<link linkend="structlist__node_1a129de89b4c110fa54377ef16ab128ce0">val</link>))&#32;{
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="list_8h_1ad16fa29ddbb444070ea65f871e1c0ba2">list_iterator_destroy</link>(it);
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;node;
181 &#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(val&#32;==&#32;node-&gt;<link linkend="structlist__node_1a129de89b4c110fa54377ef16ab128ce0">val</link>)&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="list_8h_1ad16fa29ddbb444070ea65f871e1c0ba2">list_iterator_destroy</link>(it);
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;node;
186 &#32;&#32;&#32;&#32;&#32;&#32;}
187 &#32;&#32;&#32;&#32;}
188 &#32;&#32;}
189 
190 &#32;&#32;<link linkend="list_8h_1ad16fa29ddbb444070ea65f871e1c0ba2">list_iterator_destroy</link>(it);
191 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NULL;
192 }
193 
<link linkend="list_8c_1ab3dacc64ceb63b0a0849312b0a14c91c">202 </link><link linkend="structlist__node">list_node_t</link>&#32;*<link linkend="list_8c_1ab3dacc64ceb63b0a0849312b0a14c91c">list_at</link>(<link linkend="structlist__t">list_t</link>&#32;*<emphasis class="keyword">self</emphasis>,&#32;<emphasis class="keywordtype">int</emphasis>&#32;index)&#32;{
203 &#32;&#32;<link linkend="list_8h_1a2c3af7de0b7ab9c3a84fbc039e75ec66">list_direction_t</link>&#32;direction&#32;=&#32;<link linkend="list_8h_1a2c3af7de0b7ab9c3a84fbc039e75ec66abdf0fd732c6a91b57c5cbea177f1ae00">LIST_HEAD</link>;
204 
205 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(index&#32;&lt;&#32;0)&#32;{
206 &#32;&#32;&#32;&#32;direction&#32;=&#32;<link linkend="list_8h_1a2c3af7de0b7ab9c3a84fbc039e75ec66a92ccc72d8839c5167e82e2a7771215ae">LIST_TAIL</link>;
207 &#32;&#32;&#32;&#32;index&#32;=&#32;~index;
208 &#32;&#32;}
209 
210 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">unsigned</emphasis>)index&#32;&lt;&#32;self-&gt;len)&#32;{
211 &#32;&#32;&#32;&#32;<link linkend="structlist__iterator__t">list_iterator_t</link>&#32;*it&#32;=&#32;<link linkend="list_8h_1a3c956afda343b4a6aaf68fbd4b446733">list_iterator_new</link>(<emphasis class="keyword">self</emphasis>,&#32;direction);
212 &#32;&#32;&#32;&#32;<link linkend="structlist__node">list_node_t</link>&#32;*node&#32;=&#32;<link linkend="list_8h_1a2e5db981e32d3aef49ea79505a0615a6">list_iterator_next</link>(it);
213 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(index--)
214 &#32;&#32;&#32;&#32;&#32;&#32;node&#32;=&#32;<link linkend="list_8h_1a2e5db981e32d3aef49ea79505a0615a6">list_iterator_next</link>(it);
215 &#32;&#32;&#32;&#32;<link linkend="list_8h_1ad16fa29ddbb444070ea65f871e1c0ba2">list_iterator_destroy</link>(it);
216 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;node;
217 &#32;&#32;}
218 
219 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NULL;
220 }
221 
<link linkend="list_8c_1a5ef7843a8a481124bce3e93541ba379a">229 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="list_8c_1a5ef7843a8a481124bce3e93541ba379a">list_remove</link>(<link linkend="structlist__t">list_t</link>&#32;*<emphasis class="keyword">self</emphasis>,&#32;<link linkend="structlist__node">list_node_t</link>&#32;*node)&#32;{
230 &#32;&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>&#32;?&#32;(node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>&#32;=&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>)&#32;:&#32;(self-&gt;head&#32;=&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>);
231 
232 &#32;&#32;node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>&#32;?&#32;(node-&gt;<link linkend="structlist__node_1a0b99ca890dbfe832a8475f4bbd72338c">next</link>-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>&#32;=&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>)&#32;:&#32;(self-&gt;tail&#32;=&#32;node-&gt;<link linkend="structlist__node_1a30baba3b27442cbca9694076003ed65e">prev</link>);
233 
234 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(self-&gt;free)
235 &#32;&#32;&#32;&#32;<emphasis class="keyword">self</emphasis>-&gt;free(node-&gt;<link linkend="structlist__node_1a129de89b4c110fa54377ef16ab128ce0">val</link>);
236 
237 &#32;&#32;free(node);
238 &#32;&#32;--<emphasis class="keyword">self</emphasis>-&gt;len;
239 }
    </computeroutput></literallayout>
</section>
