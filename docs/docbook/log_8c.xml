<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="log_8c">
    <title>log.c File Reference</title>
<para>Include dependency diagram for log.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="log_8c__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for log.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="log_8c__dep__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Variables</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static FILE * <link linkend="log_8c_1ac1b33b9fa813506300fa09c1b21ed20a">log_lcd</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>unsigned int <link linkend="log_8c_1a8cf62743dafa288b58bd7c6028ec28e5">log_level</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="log_8c_1af3668f40d1ad1b4f3418869ac9a31f34">debug</link> (
const char * debug_message)<para><emphasis>prints a info message</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="log_8c_1a8e5bb8a2a372f5b066ff7af7044584c1">error</link> (
const char * error_message)<para><emphasis>prints a error message and displays on lcd.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="log_8c_1a1606d750e1bb8de9f9e917172bba3382">info</link> (
const char * info_message)<para><emphasis>prints a info message</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="log_8c_1a163f389b4f5cf440a807d8fb48aaa006">init_error</link> (
bool use_lcd, FILE * lcd)<para><emphasis>Initializes the error lcd system
Only required if using lcd.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static void <link linkend="log_8c_1afff22aff6749311a684a559cac3ac8bd">log_info</link> (
const char * s, const char * mess)<para><emphasis>prints a log info message to the lcd</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="log_8c_1a0bec2cf5fff7f607bc510b74aba9887c">warning</link> (
const char * warning_message)<para><emphasis>prints a warning message and displays on lcd.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /Users/chrisjerrett/Desktop/InTheZoneA/src/log.c</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="log_8h">log.h</link>&quot;</emphasis>
2 
<link linkend="log_8c_1a8cf62743dafa288b58bd7c6028ec28e5">3 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="log_8c_1a8cf62743dafa288b58bd7c6028ec28e5">log_level</link>&#32;=&#32;INFO;
<link linkend="log_8c_1ac1b33b9fa813506300fa09c1b21ed20a">4 </link><emphasis class="keyword">static</emphasis>&#32;FILE&#32;*<link linkend="log_8c_1ac1b33b9fa813506300fa09c1b21ed20a">log_lcd</link>&#32;=&#32;NULL;
5 
<link linkend="log_8c_1a163f389b4f5cf440a807d8fb48aaa006">14 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="log_8c_1a163f389b4f5cf440a807d8fb48aaa006">init_error</link>(<emphasis class="keywordtype">bool</emphasis>&#32;use_lcd,&#32;FILE&#32;*lcd)&#32;{
15 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(use_lcd)&#32;{
16 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a43dc11a67b697c0d32315ea5a9af85f9">lcdInit</link>(lcd);
17 &#32;&#32;&#32;&#32;<link linkend="log_8c_1ac1b33b9fa813506300fa09c1b21ed20a">log_lcd</link>&#32;=&#32;lcd;
18 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a5fa1d119fe3e836b5519f97eae7a1272">lcdClear</link>(<link linkend="log_8c_1ac1b33b9fa813506300fa09c1b21ed20a">log_lcd</link>);
19 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a403c82418e475fa4a8273719e6a7f3e6">printf</link>(<emphasis class="stringliteral">&quot;LCD&#32;Init\n&quot;</emphasis>);
20 &#32;&#32;}
21 }
<link linkend="log_8c_1afff22aff6749311a684a559cac3ac8bd">29 </link><emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="log_8c_1afff22aff6749311a684a559cac3ac8bd">log_info</link>(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>&#32;*s,&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>&#32;*mess)&#32;{
30 &#32;&#32;<link linkend="_a_p_i_8h_1a403c82418e475fa4a8273719e6a7f3e6">printf</link>(<emphasis class="stringliteral">&quot;[%s]:&#32;%s\n&quot;</emphasis>,&#32;s,&#32;mess);
31 &#32;&#32;<link linkend="_a_p_i_8h_1aab53a247d88151a6623c20fa1ea940b0">lcdSetBacklight</link>(<link linkend="log_8c_1ac1b33b9fa813506300fa09c1b21ed20a">log_lcd</link>,&#32;<emphasis class="keyword">false</emphasis>);
32 &#32;&#32;<link linkend="_a_p_i_8h_1a5fa1d119fe3e836b5519f97eae7a1272">lcdClear</link>(<link linkend="log_8c_1ac1b33b9fa813506300fa09c1b21ed20a">log_lcd</link>);
33 &#32;&#32;<link linkend="_a_p_i_8h_1a6cfad8271c6a566a2f51ca318f819a80">lcdPrint</link>(<link linkend="log_8c_1ac1b33b9fa813506300fa09c1b21ed20a">log_lcd</link>,&#32;TOP_ROW,&#32;s);
34 &#32;&#32;<link linkend="_a_p_i_8h_1a6cfad8271c6a566a2f51ca318f819a80">lcdPrint</link>(<link linkend="log_8c_1ac1b33b9fa813506300fa09c1b21ed20a">log_lcd</link>,&#32;BOTTOM_ROW,&#32;mess);
35 }
36 
<link linkend="log_8c_1a8e5bb8a2a372f5b066ff7af7044584c1">45 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="log_8c_1a8e5bb8a2a372f5b066ff7af7044584c1">error</link>(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>&#32;*error_message)&#32;{
46 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="log_8c_1a8cf62743dafa288b58bd7c6028ec28e5">log_level</link>&#32;&gt;&#32;NONE)
47 &#32;&#32;&#32;&#32;<link linkend="log_8c_1afff22aff6749311a684a559cac3ac8bd">log_info</link>(<emphasis class="stringliteral">&quot;ERROR&quot;</emphasis>,&#32;error_message);
48 }
49 
<link linkend="log_8c_1a0bec2cf5fff7f607bc510b74aba9887c">58 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="log_8c_1a0bec2cf5fff7f607bc510b74aba9887c">warning</link>(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>&#32;*warning_message)&#32;{
59 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="log_8c_1a8cf62743dafa288b58bd7c6028ec28e5">log_level</link>&#32;&gt;&#32;WARNING)
60 &#32;&#32;&#32;&#32;<link linkend="log_8c_1afff22aff6749311a684a559cac3ac8bd">log_info</link>(<emphasis class="stringliteral">&quot;WARNING&quot;</emphasis>,&#32;warning_message);
61 }
62 
<link linkend="log_8c_1a1606d750e1bb8de9f9e917172bba3382">70 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="log_8c_1a1606d750e1bb8de9f9e917172bba3382">info</link>(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>&#32;*info_message)&#32;{
71 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="log_8c_1a8cf62743dafa288b58bd7c6028ec28e5">log_level</link>&#32;&gt;&#32;ERROR)&#32;{
72 &#32;&#32;&#32;&#32;<link linkend="log_8c_1afff22aff6749311a684a559cac3ac8bd">log_info</link>(<emphasis class="stringliteral">&quot;INFO&quot;</emphasis>,&#32;info_message);
73 &#32;&#32;}
74 }
75 
<link linkend="log_8c_1af3668f40d1ad1b4f3418869ac9a31f34">83 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="log_8c_1af3668f40d1ad1b4f3418869ac9a31f34">debug</link>(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>&#32;*debug_message)&#32;{
84 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="log_8c_1a8cf62743dafa288b58bd7c6028ec28e5">log_level</link>&#32;&gt;&#32;ERROR)&#32;{
85 &#32;&#32;&#32;&#32;<link linkend="_a_p_i_8h_1a403c82418e475fa4a8273719e6a7f3e6">printf</link>(<emphasis class="stringliteral">&quot;[INFO]:&#32;%s\n&quot;</emphasis>,&#32;debug_message);
86 &#32;&#32;}
87 }
    </computeroutput></literallayout>
</section>
