.TH "include/main.h" 3 "Tue Nov 28 2017" "Version 1.1.4" "Vex Team 9228A" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/main.h \- Header file for global functions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <API\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBautonomous\fP ()"
.br
.ti -1c
.RI "void \fBinitialize\fP ()"
.br
.ti -1c
.RI "void \fBinitializeIO\fP ()"
.br
.ti -1c
.RI "void \fBoperatorControl\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Header file for global functions\&. 

Any experienced C or C++ programmer knows the importance of header files\&. For those who do not, a header file allows multiple files to reference functions in other files without necessarily having to see the code (and therefore causing a multiple definition)\&. To make a function in 'opcontrol\&.c', 'auto\&.c', 'main\&.c', or any other C file visible to the core implementation files, prototype it here\&.
.PP
This file is included by default in the predefined stubs in each VEX Cortex PROS Project\&.
.PP
Copyright (c) 2011-2014, Purdue University ACM SIG BOTS\&. All rights reserved\&.
.PP
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
.IP "\(bu" 2
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer\&.
.IP "\(bu" 2
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution\&.
.IP "\(bu" 2
Neither the name of Purdue University ACM SIG BOTS nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission\&.
.PP
.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED\&. IN NO EVENT SHALL PURDUE UNIVERSITY ACM SIG BOTS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\&.
.PP
Purdue Robotics OS contains FreeRTOS (http://www.freertos.org) whose source code may be obtained from http://sourceforge.net/projects/freertos/files/ or on request\&. 
.PP
Definition in file \fBmain\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "void autonomous ()"
Runs the user autonomous code\&. This function will be started in its own task with the default priority and stack size whenever the robot is enabled via the Field Management System or the VEX Competition Switch in the autonomous mode\&. If the robot is disabled or communications is lost, the autonomous task will be stopped by the kernel\&. Re-enabling the robot will restart the task, not re-start it from where it left off\&.
.PP
Code running in the autonomous task cannot access information from the VEX Joystick\&. However, the autonomous function can be invoked from another task if a VEX Competition Switch is not available, and it can access joystick information if called in this way\&.
.PP
The autonomous task may exit, unlike \fBoperatorControl()\fP which should never exit\&. If it does so, the robot will await a switch to another mode or disable/enable cycle\&. 
.PP
Definition at line 30 of file auto\&.c\&.
.PP
References analogRead(), BOTH, close_claw(), deinitslew(), delay(), GOAL_HEIGHT, imeGet(), imeReset(), init_slew(), LIFTER, MID_LEFT_DRIVE, MID_RIGHT_DRIVE, open_claw(), printf(), set_lifter_motors(), and set_side_speed()\&.
.PP
.nf
30                   {
31   init_slew();
32 
33   delay(10);
34   printf("auto\n");
35   //How far the left wheels have gone
36   int counts_drive_left;
37   //How far the right wheels have gone
38   int counts_drive_right;
39   //The average distance traveled forward
40   int counts_drive;
41 
42   //Reset the integrated motor controllers
43   imeReset(MID_LEFT_DRIVE);
44   imeReset(MID_RIGHT_DRIVE);
45   //Set initial values for how far the wheels have gone
46   imeGet(MID_LEFT_DRIVE, &counts_drive_left);
47   imeGet(MID_RIGHT_DRIVE, &counts_drive_right);
48   counts_drive = counts_drive_left + counts_drive_right;
49   counts_drive /= 2;
50 
51   //Grab pre-load cone
52   close_claw();
53   delay(300);
54 
55   //Raise the lifter
56   while(analogRead(LIFTER) < GOAL_HEIGHT){
57     set_lifter_motors(-127);
58   }
59   set_lifter_motors(0);
60   //Drive towards the goal
61   while(counts_drive < 530){
62     set_side_speed(BOTH, 127);
63     //Restablish the distance traveled
64     imeGet(MID_LEFT_DRIVE, &counts_drive_left);
65     imeGet(MID_RIGHT_DRIVE, &counts_drive_right);
66     counts_drive = counts_drive_left + counts_drive_right;
67     counts_drive /= 2;
68   }
69   //Stop moving
70   set_side_speed(BOTH, 0);
71   delay(1000);
72 
73   //Drop the cone on the goal
74   open_claw();
75   delay(1000);
76   deinitslew();
77 }
.fi
.SS "void initialize ()"
Runs user initialization code\&. This function will be started in its own task with the default priority and stack size once when the robot is starting up\&. It is possible that the VEXnet communication link may not be fully established at this time, so reading from the VEX Joystick may fail\&.
.PP
This function should initialize most sensors (gyro, encoders, ultrasonics), LCDs, global variables, and IMEs\&.
.PP
This function must exit relatively promptly, or the \fBoperatorControl()\fP and \fBautonomous()\fP tasks will not start\&. An autonomous mode selection menu like the pre_auton() in other environments can be implemented in this task if desired\&. 
.PP
Definition at line 47 of file init\&.c\&.
.PP
References imeInitializeAll(), printf(), and setTeamName()\&.
.PP
.nf
47                   {
48   int c = imeInitializeAll();
49   setTeamName("9228A");
50   printf("Counts : %d\n", c);
51 }
.fi
.SS "void initializeIO ()"
Runs pre-initialization code\&. This function will be started in kernel mode one time while the VEX Cortex is starting up\&. As the scheduler is still paused, most API functions will fail\&.
.PP
The purpose of this function is solely to set the default pin modes (\fBpinMode()\fP) and port states (\fBdigitalWrite()\fP) of limit switches, push buttons, and solenoids\&. It can also safely configure a UART port (usartOpen()) but cannot set up an LCD (\fBlcdInit()\fP)\&. 
.PP
Definition at line 30 of file init\&.c\&.
.PP
References watchdogInit()\&.
.PP
.nf
30                     {
31     watchdogInit();
32 }
.fi
.SS "void operatorControl ()"
Runs the user operator control code\&. This function will be started in its own task with the default priority and stack size whenever the robot is enabled via the Field Management System or the VEX Competition Switch in the operator control mode\&. If the robot is disabled or communications is lost, the operator control task will be stopped by the kernel\&. Re-enabling the robot will restart the task, not resume it from where it left off\&.
.PP
If no VEX Competition Switch or Field Management system is plugged in, the VEX Cortex will run the operator control task\&. Be warned that this will also occur if the VEX Cortex is tethered directly to a computer via the USB A to A cable without any VEX Joystick attached\&.
.PP
Code running in this task can take almost any action, as the VEX Joystick is available and the scheduler is operational\&. However, proper use of \fBdelay()\fP or \fBtaskDelayUntil()\fP is highly recommended to give other tasks (including system tasks such as updating LCDs) time to run\&.
.PP
This task should never exit; it should end with some kind of infinite loop, even if empty\&. 
.PP
Definition at line 40 of file opcontrol\&.c\&.
.PP
References delay(), init_slew(), update_claw(), update_control(), update_drive_motors(), update_lifter(), and updateIntake()\&.
.PP
.nf
40                        {
41     init_slew();
42     delay(10);
43     while (1) {
44         update_drive_motors();
45         update_lifter();
46         update_claw();
47         updateIntake();
48         update_control();
49         delay(25);
50     }
51 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Vex Team 9228A from the source code\&.
