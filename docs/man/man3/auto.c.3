.TH "src/auto.c" 3 "Tue Nov 28 2017" "Version 1.1.4" "Vex Team 9228A" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/auto.c \- File for autonomous code\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'main\&.h'\fP
.br
\fC#include 'auto\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBautonomous\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
File for autonomous code\&. 

This file should contain the user \fBautonomous()\fP function and any functions related to it\&.
.PP
Any copyright is dedicated to the Public Domain\&. http://creativecommons.org/publicdomain/zero/1.0/
.PP
PROS contains FreeRTOS (http://www.freertos.org) whose source code may be obtained from http://sourceforge.net/projects/freertos/files/ or on request\&. 
.PP
Definition in file \fBauto\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "void autonomous ()"
Runs the user autonomous code\&. This function will be started in its own task with the default priority and stack size whenever the robot is enabled via the Field Management System or the VEX Competition Switch in the autonomous mode\&. If the robot is disabled or communications is lost, the autonomous task will be stopped by the kernel\&. Re-enabling the robot will restart the task, not re-start it from where it left off\&.
.PP
Code running in the autonomous task cannot access information from the VEX Joystick\&. However, the autonomous function can be invoked from another task if a VEX Competition Switch is not available, and it can access joystick information if called in this way\&.
.PP
The autonomous task may exit, unlike \fBoperatorControl()\fP which should never exit\&. If it does so, the robot will await a switch to another mode or disable/enable cycle\&. 
.PP
Definition at line 30 of file auto\&.c\&.
.PP
References analogRead(), BOTH, close_claw(), deinitslew(), delay(), GOAL_HEIGHT, imeGet(), imeReset(), init_slew(), LIFTER, MID_LEFT_DRIVE, MID_RIGHT_DRIVE, open_claw(), printf(), set_lifter_motors(), and set_side_speed()\&.
.PP
.nf
30                   {
31   init_slew();
32 
33   delay(10);
34   printf("auto\n");
35   //How far the left wheels have gone
36   int counts_drive_left;
37   //How far the right wheels have gone
38   int counts_drive_right;
39   //The average distance traveled forward
40   int counts_drive;
41 
42   //Reset the integrated motor controllers
43   imeReset(MID_LEFT_DRIVE);
44   imeReset(MID_RIGHT_DRIVE);
45   //Set initial values for how far the wheels have gone
46   imeGet(MID_LEFT_DRIVE, &counts_drive_left);
47   imeGet(MID_RIGHT_DRIVE, &counts_drive_right);
48   counts_drive = counts_drive_left + counts_drive_right;
49   counts_drive /= 2;
50 
51   //Grab pre-load cone
52   close_claw();
53   delay(300);
54 
55   //Raise the lifter
56   while(analogRead(LIFTER) < GOAL_HEIGHT){
57     set_lifter_motors(-127);
58   }
59   set_lifter_motors(0);
60   //Drive towards the goal
61   while(counts_drive < 530){
62     set_side_speed(BOTH, 127);
63     //Restablish the distance traveled
64     imeGet(MID_LEFT_DRIVE, &counts_drive_left);
65     imeGet(MID_RIGHT_DRIVE, &counts_drive_right);
66     counts_drive = counts_drive_left + counts_drive_right;
67     counts_drive /= 2;
68   }
69   //Stop moving
70   set_side_speed(BOTH, 0);
71   delay(1000);
72 
73   //Drop the cone on the goal
74   open_claw();
75   delay(1000);
76   deinitslew();
77 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Vex Team 9228A from the source code\&.
