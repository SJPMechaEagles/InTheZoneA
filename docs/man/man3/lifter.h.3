.TH "include/lifter.h" 3 "Tue Nov 28 2017" "Version 1.1.4" "Vex Team 9228A" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/lifter.h \- Declarations and macros for controlling and manipulating the lifter\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <API\&.h>\fP
.br
\fC#include 'motor_ports\&.h'\fP
.br
\fC#include 'sensor_ports\&.h'\fP
.br
\fC#include 'slew\&.h'\fP
.br
\fC#include 'controller\&.h'\fP
.br
\fC#include 'potentiometer\&.h'\fP
.br
\fC#include 'partner\&.h'\fP
.br
\fC#include 'drive\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBHEIGHT\fP   19\&.1 \- 3\&.8"
.br
.RI "The integral constant for the lifter PID\&. "
.ti -1c
.RI "#define \fBINIT_ROTATION\fP   680"
.br
.RI "The initial rotation of the lifter potentiometer at height zero\&. "
.ti -1c
.RI "#define \fBLIFTER_D\fP   0"
.br
.RI "The derivative constant for the lifter PID\&. "
.ti -1c
.RI "#define \fBLIFTER_DOWN\fP   \fBMASTER\fP, 5, \fBJOY_DOWN\fP"
.br
.RI "The lifter down controller params\&. "
.ti -1c
.RI "#define \fBLIFTER_DOWN_PARTNER\fP   \fBPARTNER\fP, 5, \fBJOY_DOWN\fP"
.br
.RI "The lifter down controller params for the partner\&. "
.ti -1c
.RI "#define \fBLIFTER_DRIVER_LOAD\fP   \fBMASTER\fP, \fBRIGHT_BUTTONS\fP, \fBJOY_RIGHT\fP"
.br
.RI "Height to raise lifter to driver preload height\&. "
.ti -1c
.RI "#define \fBLIFTER_I\fP   0"
.br
.RI "The integral constant for the lifter PID\&. "
.ti -1c
.RI "#define \fBLIFTER_P\fP   \&.15"
.br
.RI "The proportional constant for the lifter PID\&. "
.ti -1c
.RI "#define \fBLIFTER_UP\fP   \fBMASTER\fP, 5, \fBJOY_UP\fP"
.br
.RI "The lifter up controller params\&. "
.ti -1c
.RI "#define \fBLIFTER_UP_PARTNER\fP   \fBPARTNER\fP, 5, \fBJOY_UP\fP"
.br
.RI "The lifter up controller params for the partner\&. "
.ti -1c
.RI "#define \fBTHRESHOLD\fP   10"
.br
.RI "The threshold of a signficant speed for the lifter\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBgetLifterHeight\fP ()"
.br
.RI "Gets the height of the lifter in inches\&. "
.ti -1c
.RI "int \fBgetLifterTicks\fP ()"
.br
.RI "Gets the value of the lifter pot\&. "
.ti -1c
.RI "float \fBlifterPotentiometerToDegree\fP (int x)"
.br
.RI "height of the lifter in degrees from 0 height "
.ti -1c
.RI "void \fBset_lifter_motors\fP (const int)"
.br
.RI "Sets the lifter motors to the given value\&. "
.ti -1c
.RI "void \fBset_lifter_pos\fP (int pos)"
.br
.RI "Sets the lifter positions to the given value\&. "
.ti -1c
.RI "void \fBupdate_lifter\fP ()"
.br
.RI "Updates the lifter in teleop\&. "
.in -1c
.SH "Detailed Description"
.PP 
Declarations and macros for controlling and manipulating the lifter\&. 


.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett, Christian Desimone 
.RE
.PP
\fBDate:\fP
.RS 4
8/27/2017 
.RE
.PP

.PP
Definition in file \fBlifter\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define HEIGHT   19\&.1 \- 3\&.8"

.PP
The integral constant for the lifter PID\&. 
.PP
Definition at line 48 of file lifter\&.h\&.
.SS "#define INIT_ROTATION   680"

.PP
The initial rotation of the lifter potentiometer at height zero\&. 
.PP
Definition at line 22 of file lifter\&.h\&.
.PP
Referenced by lifterPotentiometerToDegree()\&.
.SS "#define LIFTER_D   0"

.PP
The derivative constant for the lifter PID\&. 
.PP
Definition at line 32 of file lifter\&.h\&.
.PP
Referenced by update_lifter()\&.
.SS "#define LIFTER_DOWN   \fBMASTER\fP, 5, \fBJOY_DOWN\fP"

.PP
The lifter down controller params\&. 
.PP
Definition at line 58 of file lifter\&.h\&.
.PP
Referenced by update_lifter()\&.
.SS "#define LIFTER_DOWN_PARTNER   \fBPARTNER\fP, 5, \fBJOY_DOWN\fP"

.PP
The lifter down controller params for the partner\&. 
.PP
Definition at line 73 of file lifter\&.h\&.
.PP
Referenced by update_lifter()\&.
.SS "#define LIFTER_DRIVER_LOAD   \fBMASTER\fP, \fBRIGHT_BUTTONS\fP, \fBJOY_RIGHT\fP"

.PP
Height to raise lifter to driver preload height\&. 
.PP
Definition at line 63 of file lifter\&.h\&.
.PP
Referenced by update_lifter()\&.
.SS "#define LIFTER_I   0"

.PP
The integral constant for the lifter PID\&. 
.PP
Definition at line 42 of file lifter\&.h\&.
.PP
Referenced by update_lifter()\&.
.SS "#define LIFTER_P   \&.15"

.PP
The proportional constant for the lifter PID\&. 
.PP
Definition at line 27 of file lifter\&.h\&.
.PP
Referenced by update_lifter()\&.
.SS "#define LIFTER_UP   \fBMASTER\fP, 5, \fBJOY_UP\fP"

.PP
The lifter up controller params\&. 
.PP
Definition at line 53 of file lifter\&.h\&.
.PP
Referenced by update_lifter()\&.
.SS "#define LIFTER_UP_PARTNER   \fBPARTNER\fP, 5, \fBJOY_UP\fP"

.PP
The lifter up controller params for the partner\&. 
.PP
Definition at line 68 of file lifter\&.h\&.
.PP
Referenced by update_lifter()\&.
.SS "#define THRESHOLD   10"

.PP
The threshold of a signficant speed for the lifter\&. 
.PP
Definition at line 37 of file lifter\&.h\&.
.SH "Function Documentation"
.PP 
.SS "double getLifterHeight ()"

.PP
Gets the height of the lifter in inches\&. 
.PP
\fBReturns:\fP
.RS 4
the height of the lifter\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/17/2017 
.RE
.PP

.PP
Definition at line 137 of file lifter\&.c\&.
.PP
References getLifterTicks()\&.
.PP
.nf
137                          {
138   unsigned int ticks = getLifterTicks();
139   return (-2 * pow(10, (-9 * ticks)) + 6 * (pow(10, (-6 * ticks * ticks))) + 0\&.0198 * ticks + 2\&.3033);
140 }
.fi
.SS "int getLifterTicks ()"

.PP
Gets the value of the lifter pot\&. 
.PP
\fBReturns:\fP
.RS 4
the value of the pot\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 126 of file lifter\&.c\&.
.PP
References analogRead(), and LIFTER\&.
.PP
Referenced by getLifterHeight(), and update_lifter()\&.
.PP
.nf
126                      {
127   return analogRead(LIFTER);
128 }
.fi
.SS "float lifterPotentiometerToDegree (int x)"

.PP
height of the lifter in degrees from 0 height 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the pot value 
.RE
.PP
\fBReturns:\fP
.RS 4
the positions in degrees 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
10/13/2017 
.RE
.PP

.PP
Definition at line 115 of file lifter\&.c\&.
.PP
References DEG_MAX, INIT_ROTATION, and TICK_MAX\&.
.PP
.nf
115                                         {
116   return (x - INIT_ROTATION) / TICK_MAX * DEG_MAX;
117 }
.fi
.SS "void set_lifter_motors (const int v)"

.PP
Sets the lifter motors to the given value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP value for the lifter motor\&. Between -128 - 127, any values outside are clamped\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 10 of file lifter\&.c\&.
.PP
References MOTOR_LIFT_TOP_LEFT, MOTOR_LIFT_TOP_RIGHT, and set_motor_immediate()\&.
.PP
Referenced by autonomous(), lower_lifter(), raise_lifter(), and update_lifter()\&.
.PP
.nf
10                                     {
11   set_motor_immediate(MOTOR_LIFT_TOP_RIGHT, -v);
12   set_motor_immediate(MOTOR_LIFT_TOP_LEFT, -v);
13 }
.fi
.SS "void set_lifter_pos (int pos)"

.PP
Sets the lifter positions to the given value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP The height in inches 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/12/2017 
.RE
.PP

.PP
Definition at line 22 of file lifter\&.c\&.
.PP
.nf
22                              {
23 
24 }
.fi
.SS "void update_lifter ()"

.PP
Updates the lifter in teleop\&. 
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 40 of file lifter\&.c\&.
.PP
References get_mode(), getLifterTicks(), joystickGetDigital(), LIFTER_D, LIFTER_DOWN, LIFTER_DOWN_PARTNER, LIFTER_DRIVER_LOAD, LIFTER_I, LIFTER_P, LIFTER_UP, LIFTER_UP_PARTNER, lower_lifter(), MAIN_CONTROLLER_MODE, PARTNER_CONTROLLER_MODE, raise_lifter(), set_lifter_motors(), and THRESHOLD\&.
.PP
Referenced by operatorControl()\&.
.PP
.nf
40                      {
41   //Establish variables to be used repeatedly
42   static bool changed = true;
43   static unsigned int target = 0;
44   static bool first_run = true;
45   //Set the target to the current height for the first run
46   if(first_run) {
47     target = getLifterTicks();
48     first_run = false;
49   }
50   //Establish the error as 0
51   static int last_error = 0;
52   static long long i = 0;
53   //Check the buttons on the controller indicated by the controller mode
54   if((joystickGetDigital(LIFTER_UP) && get_mode() == MAIN_CONTROLLER_MODE)
55    || (joystickGetDigital(LIFTER_UP_PARTNER) && get_mode() == PARTNER_CONTROLLER_MODE)){
56     changed = true;
57     i = 0;
58     //Change the target and start the motion
59     target = getLifterTicks() + 200;
60     lower_lifter();
61   }
62   else if((joystickGetDigital(LIFTER_DOWN) && get_mode() == MAIN_CONTROLLER_MODE)
63    || (joystickGetDigital(LIFTER_DOWN_PARTNER) && get_mode() == PARTNER_CONTROLLER_MODE)) {
64     changed = true;
65     i = 0;
66     //Change the target and start the motion
67     target = getLifterTicks();
68     raise_lifter();
69   }
70   //Raise the lifter to the driver load height
71   else if(joystickGetDigital(LIFTER_DRIVER_LOAD) && get_mode() == MAIN_CONTROLLER_MODE){
72     changed = true;
73     i = 0;
74     int k = 0;
75     if(getLifterTicks() < 1270){
76       lower_lifter();
77 
78     }
79     if(getLifterTicks() > 1230){
80       raise_lifter();
81     }
82     target = 1250;
83   }
84   //Change lifter motor values based upon the target
85   else {
86     //Don't if we are using the partner controller
87     if(get_mode() == PARTNER_CONTROLLER_MODE){
88       set_lifter_motors(0);
89       return;
90     }
91     //Define the proportion, derivative, and integral to be used in the motor speed
92     int p = getLifterTicks() - target;
93     int d = p - last_error;
94     last_error = p;
95     i += p;
96     int motor = LIFTER_P * p + LIFTER_D * d + LIFTER_I * i;
97     //Avoid wasting battery if value is insignificant
98     if (motor < THRESHOLD) {
99         set_lifter_motors(0);
100     } else {
101         set_lifter_motors(motor);
102     }
103 
104   }
105 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Vex Team 9228A from the source code\&.
