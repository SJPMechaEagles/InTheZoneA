.TH "src/log.c" 3 "Tue Nov 28 2017" "Version 1.1.4" "Vex Team 9228A" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/log.c
.SH SYNOPSIS
.br
.PP
\fC#include 'log\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBdebug\fP (const char *debug_message)"
.br
.RI "prints a info message "
.ti -1c
.RI "void \fBerror\fP (const char *error_message)"
.br
.RI "prints a error message and displays on lcd\&. Only will print and display if log_level is greater than NONE "
.ti -1c
.RI "void \fBinfo\fP (const char *info_message)"
.br
.RI "prints a info message "
.ti -1c
.RI "void \fBinit_error\fP (bool use_lcd, \fBFILE\fP *lcd)"
.br
.RI "Initializes the error lcd system Only required if using lcd\&. "
.ti -1c
.RI "static void \fBlog_info\fP (const char *s, const char *mess)"
.br
.ti -1c
.RI "void \fBwarning\fP (const char *warning_message)"
.br
.RI "prints a warning message and displays on lcd\&. Only will print and display if log_level is greater than NONE "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static \fBFILE\fP * \fBlog_lcd\fP = NULL"
.br
.ti -1c
.RI "unsigned int \fBlog_level\fP = \fBINFO\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void debug (const char * debug_message)"

.PP
prints a info message Only will print and display if log_level is greater than info 
.PP
\fBSee also:\fP
.RS 4
\fBlog_level\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdebug_message\fP the message 
.RE
.PP

.PP
Definition at line 37 of file log\&.c\&.
.PP
References ERROR, log_level, and printf()\&.
.PP
Referenced by set_motor_immediate(), and set_motor_slew()\&.
.PP
.nf
37                                       {
38   if(log_level>ERROR) {
39     printf("[INFO]: %s\n", debug_message);
40   }
41 }
.fi
.SS "void error (const char * error_message)"

.PP
prints a error message and displays on lcd\&. Only will print and display if log_level is greater than NONE 
.PP
\fBSee also:\fP
.RS 4
\fBlog_level\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/10/17 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIerror_message\fP the message 
.RE
.PP

.PP
Definition at line 21 of file log\&.c\&.
.PP
References log_info(), log_level, and NONE\&.
.PP
Referenced by create_menu()\&.
.PP
.nf
21                                       {
22   if(log_level>NONE)
23     log_info("ERROR", error_message);
24 }
.fi
.SS "void info (const char * info_message)"

.PP
prints a info message Only will print and display if log_level is greater than ERROR 
.PP
\fBSee also:\fP
.RS 4
\fBlog_level\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIinfo_message\fP the message 
.RE
.PP

.PP
Definition at line 31 of file log\&.c\&.
.PP
References ERROR, log_level, and printf()\&.
.PP
Referenced by init_slew()\&.
.PP
.nf
31                                     {
32   if(log_level>ERROR) {
33     printf("[INFO]: %s\n", info_message);
34   }
35 }
.fi
.SS "void init_error (bool use_lcd, \fBFILE\fP * lcd)"

.PP
Initializes the error lcd system Only required if using lcd\&. 
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/10/17 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIuse_lcd\fP whether to use the lcd 
.br
\fIlcd\fP the lcd 
.RE
.PP

.PP
Definition at line 6 of file log\&.c\&.
.PP
References lcdInit(), and log_lcd\&.
.PP
.nf
6                                          {
7   if(use_lcd) {
8     lcdInit(lcd);
9     log_lcd = lcd;
10   }
11 }
.fi
.SS "static void log_info (const char * s, const char * mess)\fC [static]\fP"

.PP
Definition at line 13 of file log\&.c\&.
.PP
References BOTTOM_ROW, lcdClear(), lcdSetBacklight(), log_lcd, printf(), and TOP_ROW\&.
.PP
Referenced by error(), and warning()\&.
.PP
.nf
13                                                       {
14   printf("[%s]: %s\n", s, mess);
15   lcdSetBacklight(log_lcd, true);
16   lcdClear(log_lcd);
17   lcdPrint(log_lcd, TOP_ROW, s);
18   lcdPrint(log_lcd, BOTTOM_ROW, mess);
19 }
.fi
.SS "void warning (const char * warning_message)"

.PP
prints a warning message and displays on lcd\&. Only will print and display if log_level is greater than NONE 
.PP
\fBSee also:\fP
.RS 4
\fBlog_level\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/10/17 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIwarning_message\fP the message 
.RE
.PP

.PP
Definition at line 26 of file log\&.c\&.
.PP
References log_info(), log_level, and WARNING\&.
.PP
Referenced by init_slew()\&.
.PP
.nf
26                                           {
27   if(log_level>WARNING)
28     log_info("WARNING", warning_message);
29 }
.fi
.SH "Variable Documentation"
.PP 
.SS "\fBFILE\fP* log_lcd = NULL\fC [static]\fP"

.PP
Definition at line 4 of file log\&.c\&.
.PP
Referenced by init_error(), and log_info()\&.
.SS "unsigned int log_level = \fBINFO\fP"

.PP
Definition at line 3 of file log\&.c\&.
.PP
Referenced by debug(), error(), info(), and warning()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Vex Team 9228A from the source code\&.
