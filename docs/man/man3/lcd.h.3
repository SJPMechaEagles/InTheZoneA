.TH "include/lcd.h" 3 "Tue Nov 28 2017" "Version 1.1.4" "Vex Team 9228A" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/lcd.h \- LCD wrapper functions and macros\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <API\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBlcd_buttons\fP"
.br
.RI "represents the state of the lcd buttons "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBOTTOM_ROW\fP   2"
.br
.RI "The bottom row on the lcd screen\&. "
.ti -1c
.RI "#define \fBTOP_ROW\fP   1"
.br
.RI "The top row on the lcd screen\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBbutton_state\fP { \fBRELEASED\fP = false, \fBPRESSED\fP = true }
.RI "Represents the state of a button\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBinit_main_lcd\fP (\fBFILE\fP *lcd)"
.br
.RI "Initializes the lcd screen\&. Also will initialize the lcd_port var\&. Must be called before any lcd function can be called\&. "
.ti -1c
.RI "void \fBlcd_clear\fP ()"
.br
.RI "Clears the lcd\&. "
.ti -1c
.RI "\fBlcd_buttons\fP \fBlcd_get_pressed_buttons\fP ()"
.br
.RI "Returns the pressed buttons\&. "
.ti -1c
.RI "void \fBlcd_print\fP (unsigned int \fBline\fP, const char *str)"
.br
.RI "prints a string to a line on the lcd "
.ti -1c
.RI "void \fBlcd_printf\fP (unsigned int \fBline\fP, const char *format_str,\&.\&.\&.)"
.br
.RI "prints a formated string to a line on the lcd\&. Smilar to printf "
.ti -1c
.RI "void \fBlcd_set_backlight\fP (bool state)"
.br
.RI "sets the backlight of the lcd "
.ti -1c
.RI "void \fBpromt_confirmation\fP (const char *confirm_text)"
.br
.RI "Prompts the user to confirm a string\&. User must press middle button to confirm\&. Function is not thread safe and will stall a thread\&. "
.in -1c
.SH "Detailed Description"
.PP 
LCD wrapper functions and macros\&. 


.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition in file \fBlcd\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define BOTTOM_ROW   2"

.PP
The bottom row on the lcd screen\&. 
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 25 of file lcd\&.h\&.
.PP
Referenced by log_info()\&.
.SS "#define TOP_ROW   1"

.PP
The top row on the lcd screen\&. 
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 18 of file lcd\&.h\&.
.PP
Referenced by display_menu(), and log_info()\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBbutton_state\fP"

.PP
Represents the state of a button\&. A button can be pressed of RELEASED\&. Release is false which is also 0\&. PRESSED is true or 1\&.
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRELEASED \fP\fP
A released button 
.TP
\fB\fIPRESSED \fP\fP
A pressed button 
.PP
Definition at line 36 of file lcd\&.h\&.
.PP
.nf
36              {
38   RELEASED = false,
40   PRESSED = true,
41 } button_state;
.fi
.SH "Function Documentation"
.PP 
.SS "void init_main_lcd (\fBFILE\fP * lcd)"

.PP
Initializes the lcd screen\&. Also will initialize the lcd_port var\&. Must be called before any lcd function can be called\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlcd\fP the urart port of the lcd screen 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBuart1\fP 
.PP
\fBuart2\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 60 of file lcd\&.c\&.
.PP
References lcd_port, lcdClear(), and lcdInit()\&.
.PP
.nf
60                               {
61   lcdInit(lcd);
62   lcdClear(lcd);
63   lcd_port = lcd;
64 }
.fi
.SS "void lcd_clear ()"

.PP
Clears the lcd\&. 
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 46 of file lcd\&.c\&.
.PP
References lcd_assert(), lcd_port, and lcdClear()\&.
.PP
.nf
46                  {
47   lcd_assert();
48   lcdClear(lcd_port);
49 }
.fi
.SS "\fBlcd_buttons\fP lcd_get_pressed_buttons ()"

.PP
Returns the pressed buttons\&. 
.PP
\fBReturns:\fP
.RS 4
a struct containing the states of all three buttons\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlcd_buttons\fP 
.RE
.PP

.PP
Definition at line 27 of file lcd\&.c\&.
.PP
References lcd_assert(), lcd_port, lcdReadButtons(), lcd_buttons::left, lcd_buttons::middle, PRESSED, RELEASED, and lcd_buttons::right\&.
.PP
Referenced by display_menu(), and promt_confirmation()\&.
.PP
.nf
27                                      {
28   lcd_assert();
29   unsigned int btn_binary = lcdReadButtons(lcd_port);
30   bool left = btn_binary & 0x1;//0001
31   bool middle = btn_binary & 0x2;//0010
32   bool right = btn_binary & 0x4;//0100
33   lcd_buttons btns;
34   btns\&.left = left ? PRESSED : RELEASED;
35   btns\&.middle = middle ? PRESSED : RELEASED;
36   btns\&.right = right ? PRESSED : RELEASED;
37 
38   return btns;
39 }
.fi
.SS "void lcd_print (unsigned int line, const char * str)"

.PP
prints a string to a line on the lcd 
.PP
\fBParameters:\fP
.RS 4
\fIline\fP the line to print on 
.br
\fIstr\fP string to print 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 73 of file lcd\&.c\&.
.PP
References lcd_assert(), lcd_port, and lcdSetText()\&.
.PP
Referenced by display_menu(), and promt_confirmation()\&.
.PP
.nf
73                                                    {
74   lcd_assert();
75   lcdSetText(lcd_port, line, str);
76 }
.fi
.SS "void lcd_printf (unsigned int line, const char * format_str,  \&.\&.\&.)"

.PP
prints a formated string to a line on the lcd\&. Smilar to printf 
.PP
\fBParameters:\fP
.RS 4
\fIline\fP the line to print on 
.br
\fIformat_str\fP format string string to print 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 85 of file lcd\&.c\&.
.PP
References lcd_assert(), and lcd_port\&.
.PP
.nf
85                                                                 {
86   lcd_assert();
87   lcdPrint(lcd_port, line, format_str);
88 }
.fi
.SS "void lcd_set_backlight (bool state)"

.PP
sets the backlight of the lcd 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP a boolean representing the state of the backlight\&. true = on, false = off\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 96 of file lcd\&.c\&.
.PP
References lcd_assert(), lcd_port, and lcdSetBacklight()\&.
.PP
.nf
96                                    {
97   lcd_assert();
98   lcdSetBacklight(lcd_port, state);
99 }
.fi
.SS "void promt_confirmation (const char * confirm_text)"

.PP
Prompts the user to confirm a string\&. User must press middle button to confirm\&. Function is not thread safe and will stall a thread\&. 
.PP
\fBParameters:\fP
.RS 4
\fIconfirm_text\fP the text for the user to confirm\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Chris Jerrett 
.RE
.PP
\fBDate:\fP
.RS 4
9/9/2017 
.RE
.PP

.PP
Definition at line 110 of file lcd\&.c\&.
.PP
References delay(), lcd_assert(), lcd_get_pressed_buttons(), lcd_print(), and PRESSED\&.
.PP
.nf
110                                                   {
111   lcd_assert();
112   lcd_print(1, confirm_text);
113   while(lcd_get_pressed_buttons()\&.middle != PRESSED){
114     delay(200);
115   }
116 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Vex Team 9228A from the source code\&.
