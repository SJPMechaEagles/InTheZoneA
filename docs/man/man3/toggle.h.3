.TH "include/toggle.h" 3 "Tue Nov 28 2017" "Version 1.1.4" "Vex Team 9228A" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/toggle.h
.SH SYNOPSIS
.br
.PP
\fC#include <API\&.h>\fP
.br

.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBbutton_t\fP { \fBJOY1_5D\fP = 0, \fBJOY1_5U\fP = 1, \fBJOY1_6D\fP = 2, \fBJOY1_6U\fP = 3, \fBJOY1_7U\fP = 4, \fBJOY1_7L\fP = 5, \fBJOY1_7R\fP = 6, \fBJOY1_7D\fP = 7, \fBJOY1_8U\fP = 8, \fBJOY1_8L\fP = 9, \fBJOY1_8R\fP = 10, \fBJOY1_8D\fP = 11, \fBJOY2_5D\fP = 12, \fBJOY2_5U\fP = 13, \fBJOY2_6D\fP = 14, \fBJOY2_6U\fP = 15, \fBJOY2_7U\fP = 16, \fBJOY2_7L\fP = 17, \fBJOY2_7R\fP = 18, \fBJOY2_7D\fP = 19, \fBJOY2_8U\fP = 20, \fBJOY2_8L\fP = 21, \fBJOY2_8R\fP = 22, \fBJOY2_8D\fP = 23, \fBLCD_LEFT\fP = 24, \fBLCD_CENT\fP = 25, \fBLCD_RIGHT\fP = 26 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBbuttonGetState\fP (\fBbutton_t\fP)"
.br
.RI "Returns the current status of a button (pressed or not pressed) "
.ti -1c
.RI "void \fBbuttonInit\fP ()"
.br
.RI "Initializes the buttons\&. "
.ti -1c
.RI "bool \fBbuttonIsNewPress\fP (\fBbutton_t\fP)"
.br
.RI "Detects if button is a new press from most recent check by comparing previous value to current value\&. "
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBbutton_t\fP"
Renames the input channels 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIJOY1_5D \fP\fP
.TP
\fB\fIJOY1_5U \fP\fP
.TP
\fB\fIJOY1_6D \fP\fP
.TP
\fB\fIJOY1_6U \fP\fP
.TP
\fB\fIJOY1_7U \fP\fP
.TP
\fB\fIJOY1_7L \fP\fP
.TP
\fB\fIJOY1_7R \fP\fP
.TP
\fB\fIJOY1_7D \fP\fP
.TP
\fB\fIJOY1_8U \fP\fP
.TP
\fB\fIJOY1_8L \fP\fP
.TP
\fB\fIJOY1_8R \fP\fP
.TP
\fB\fIJOY1_8D \fP\fP
.TP
\fB\fIJOY2_5D \fP\fP
.TP
\fB\fIJOY2_5U \fP\fP
.TP
\fB\fIJOY2_6D \fP\fP
.TP
\fB\fIJOY2_6U \fP\fP
.TP
\fB\fIJOY2_7U \fP\fP
.TP
\fB\fIJOY2_7L \fP\fP
.TP
\fB\fIJOY2_7R \fP\fP
.TP
\fB\fIJOY2_7D \fP\fP
.TP
\fB\fIJOY2_8U \fP\fP
.TP
\fB\fIJOY2_8L \fP\fP
.TP
\fB\fIJOY2_8R \fP\fP
.TP
\fB\fIJOY2_8D \fP\fP
.TP
\fB\fILCD_LEFT \fP\fP
.TP
\fB\fILCD_CENT \fP\fP
.TP
\fB\fILCD_RIGHT \fP\fP
.PP
Definition at line 20 of file toggle\&.h\&.
.PP
.nf
20              {
21     JOY1_5D = 0,
22     JOY1_5U = 1,
23     JOY1_6D = 2,
24     JOY1_6U = 3,
25     JOY1_7U = 4,
26     JOY1_7L = 5,
27     JOY1_7R = 6,
28     JOY1_7D = 7,
29     JOY1_8U = 8,
30     JOY1_8L = 9,
31     JOY1_8R = 10,
32     JOY1_8D = 11,
33 
34     JOY2_5D = 12,
35     JOY2_5U = 13,
36     JOY2_6D = 14,
37     JOY2_6U = 15,
38     JOY2_7U = 16,
39     JOY2_7L = 17,
40     JOY2_7R = 18,
41     JOY2_7D = 19,
42     JOY2_8U = 20,
43     JOY2_8L = 21,
44     JOY2_8R = 22,
45     JOY2_8D = 23,
46 
47     LCD_LEFT = 24,
48     LCD_CENT = 25,
49     LCD_RIGHT = 26
50 } button_t;
.fi
.SH "Function Documentation"
.PP 
.SS "bool buttonGetState (\fBbutton_t\fP)"

.PP
Returns the current status of a button (pressed or not pressed) 
.PP
\fBParameters:\fP
.RS 4
\fIbutton\fP The button to detect from the Buttons enumeration\&.
.RE
.PP
\fBReturns:\fP
.RS 4
true (pressed) or false (not pressed) 
.RE
.PP

.PP
Definition at line 25 of file toggle\&.c\&.
.PP
References JOY_DOWN, JOY_LEFT, JOY_RIGHT, JOY_UP, joystickGetDigital(), LCD_BTN_CENTER, LCD_BTN_LEFT, LCD_BTN_RIGHT, LCD_CENT, LCD_LEFT, LCD_RIGHT, lcdReadButtons(), and uart1\&.
.PP
Referenced by buttonIsNewPress()\&.
.PP
.nf
25                                      {
26     bool currentButton = false;
27 
28     // Determine how to get the current button value (from what function) and where it
29     // is, then get it\&.
30     if (button < LCD_LEFT) {
31         // button is a joystick button
32         unsigned char joystick;
33         unsigned char buttonGroup;
34         unsigned char buttonLocation;
35 
36         button_t newButton;
37         if (button <= 11) {
38             // button is on joystick 1
39             joystick = 1;
40             newButton = button;
41         }
42         else {
43             // button is on joystick 2
44             joystick = 2;
45             // shift button down to joystick 1 buttons in order to
46             // detect which button on joystick is queried
47             newButton = (button_t)(button - 12);
48         }
49 
50         switch (newButton) {
51         case 0:
52             buttonGroup = 5;
53             buttonLocation = JOY_DOWN;
54             break;
55         case 1:
56             buttonGroup = 5;
57             buttonLocation = JOY_UP;
58             break;
59         case 2:
60             buttonGroup = 6;
61             buttonLocation = JOY_DOWN;
62             break;
63         case 3:
64             buttonGroup = 6;
65             buttonLocation = JOY_UP;
66             break;
67         case 4:
68             buttonGroup = 7;
69             buttonLocation = JOY_UP;
70             break;
71         case 5:
72             buttonGroup = 7;
73             buttonLocation = JOY_LEFT;
74             break;
75         case 6:
76             buttonGroup = 7;
77             buttonLocation = JOY_RIGHT;
78             break;
79         case 7:
80             buttonGroup = 7;
81             buttonLocation = JOY_DOWN;
82             break;
83         case 8:
84             buttonGroup = 8;
85             buttonLocation = JOY_UP;
86             break;
87         case 9:
88             buttonGroup = 8;
89             buttonLocation = JOY_LEFT;
90             break;
91         case 10:
92             buttonGroup = 8;
93             buttonLocation = JOY_RIGHT;
94             break;
95         case 11:
96             buttonGroup = 8;
97             buttonLocation = JOY_DOWN;
98             break;
99         default:
100             break;
101         }
102         currentButton = joystickGetDigital(joystick, buttonGroup, buttonLocation);
103     }
104     else {
105         // button is on LCD
106         if (button == LCD_LEFT)
107             currentButton = (lcdReadButtons(uart1) == LCD_BTN_LEFT);
108 
109         if (button == LCD_CENT)
110             currentButton = (lcdReadButtons(uart1) == LCD_BTN_CENTER);
111 
112         if (button == LCD_RIGHT)
113             currentButton = (lcdReadButtons(uart1) == LCD_BTN_RIGHT);
114     }
115     return currentButton;
116 }
.fi
.SS "void buttonInit ()"

.PP
Initializes the buttons\&. Initializes the buttons\&. 
.PP
Definition at line 20 of file toggle\&.c\&.
.PP
References buttonPressed\&.
.PP
.nf
20                   {
21     for (int i = 0; i < 27; i++)
22         buttonPressed[i] = false;
23 }
.fi
.SS "bool buttonIsNewPress (\fBbutton_t\fP button)"

.PP
Detects if button is a new press from most recent check by comparing previous value to current value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbutton\fP The button to detect from the Buttons enumeration (see include/buttons\&.h)\&.
.RE
.PP
\fBReturns:\fP
.RS 4
true or false depending on if there was a change in button state\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIbutton\fP The button to detect from the Buttons enumeration (see include/buttons\&.h)\&.
.RE
.PP
\fBReturns:\fP
.RS 4
true or false depending on if there was a change in button state\&.
.RE
.PP
Example code: 
.PP
.nf
\&.\&.\&.
if(buttonIsNewPress(JOY1_8D))
    digitalWrite(1, !digitalRead(1));
\&.\&.\&.

.fi
.PP
 
.PP
Definition at line 135 of file toggle\&.c\&.
.PP
References buttonGetState(), and buttonPressed\&.
.PP
.nf
135                                        {
136     bool currentButton = buttonGetState(button);
137 
138     if (!currentButton) // buttons is not currently pressed
139         buttonPressed[button] = false;
140 
141     if (currentButton && !buttonPressed[button]) {
142         // button is currently pressed and was not detected as being pressed during last check
143         buttonPressed[button] = true;
144         return true;
145     }
146     else return false; // button is not pressed or was already detected
147 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Vex Team 9228A from the source code\&.
